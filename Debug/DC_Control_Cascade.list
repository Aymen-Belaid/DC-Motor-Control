
DC_Control_Cascade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  08007c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000338  24000034  08007c3c  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400036c  08007c3c  0002036c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e3cc  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a86  00000000  00000000  0003e42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001018  00000000  00000000  00040eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f60  00000000  00000000  00041ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032786  00000000  00000000  00042e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013f5c  00000000  00000000  000755b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c2c8  00000000  00000000  00089512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d57da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044a0  00000000  00000000  001d5830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000034 	.word	0x24000034
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007ba8 	.word	0x08007ba8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000038 	.word	0x24000038
 800030c:	08007ba8 	.word	0x08007ba8

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fbff 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 fa01 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fd45 	bl	80010a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061a:	f000 fcef 	bl	8000ffc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800061e:	f000 fd39 	bl	8001094 <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 8000622:	f000 fb0d 	bl	8000c40 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000626:	f000 fab5 	bl	8000b94 <MX_TIM3_Init>
  MX_TIM8_Init();
 800062a:	f000 fbd1 	bl	8000dd0 <MX_TIM8_Init>
  MX_TIM2_Init();
 800062e:	f000 fa63 	bl	8000af8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000632:	f000 fb7d 	bl	8000d30 <MX_TIM5_Init>
  MX_TIM23_Init();
 8000636:	f000 fc43 	bl	8000ec0 <MX_TIM23_Init>
  MX_TIM24_Init();
 800063a:	f000 fc91 	bl	8000f60 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	488b      	ldr	r0, [pc, #556]	; (8000870 <main+0x268>)
 8000644:	f001 ff2e 	bl	80024a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2104      	movs	r1, #4
 800064c:	4888      	ldr	r0, [pc, #544]	; (8000870 <main+0x268>)
 800064e:	f001 ff29 	bl	80024a4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000652:	210c      	movs	r1, #12
 8000654:	4887      	ldr	r0, [pc, #540]	; (8000874 <main+0x26c>)
 8000656:	f004 fb31 	bl	8004cbc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800065a:	213c      	movs	r1, #60	; 0x3c
 800065c:	4886      	ldr	r0, [pc, #536]	; (8000878 <main+0x270>)
 800065e:	f004 fe63 	bl	8005328 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start (&htim8,TIM_CHANNEL_3);
 8000662:	2108      	movs	r1, #8
 8000664:	4885      	ldr	r0, [pc, #532]	; (800087c <main+0x274>)
 8000666:	f004 fca7 	bl	8004fb8 <HAL_TIM_IC_Start>
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim23);
  HAL_TIM_Base_Start_IT(&htim24);
 800066a:	4885      	ldr	r0, [pc, #532]	; (8000880 <main+0x278>)
 800066c:	f004 fa3e 	bl	8004aec <HAL_TIM_Base_Start_IT>




  int CCR_old =0;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  int CCR_new = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]



while (1)
  {
	while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 8000678:	bf00      	nop
 800067a:	4b80      	ldr	r3, [pc, #512]	; (800087c <main+0x274>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	2b08      	cmp	r3, #8
 8000686:	d1f8      	bne.n	800067a <main+0x72>
	CCR_new = __HAL_TIM_GET_COMPARE(&htim8,TIM_CHANNEL_3);
 8000688:	4b7c      	ldr	r3, [pc, #496]	; (800087c <main+0x274>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068e:	603b      	str	r3, [r7, #0]
	diff = CCR_new - CCR_old;
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	4a7b      	ldr	r2, [pc, #492]	; (8000884 <main+0x27c>)
 8000698:	6013      	str	r3, [r2, #0]
	CCR_old = CCR_new;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	607b      	str	r3, [r7, #4]
	speed = 154.2746392/ diff;
 800069e:	4b79      	ldr	r3, [pc, #484]	; (8000884 <main+0x27c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006aa:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8000868 <main+0x260>
 80006ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006b6:	4b74      	ldr	r3, [pc, #464]	; (8000888 <main+0x280>)
 80006b8:	edc3 7a00 	vstr	s15, [r3]
	//143.320208327- PPR 1205.6
	// 127.0497029 - PPR 1360
	//
 	DIR = (TIM3->CR1) & (1U << 4);
 80006bc:	4b73      	ldr	r3, [pc, #460]	; (800088c <main+0x284>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b70      	ldr	r3, [pc, #448]	; (8000890 <main+0x288>)
 80006d0:	701a      	strb	r2, [r3, #0]
	 if (((ref ^ DIR) != false) & (DIR == false)) //falling edge => sens : inv -> dir
 80006d2:	4b70      	ldr	r3, [pc, #448]	; (8000894 <main+0x28c>)
 80006d4:	781a      	ldrb	r2, [r3, #0]
 80006d6:	4b6e      	ldr	r3, [pc, #440]	; (8000890 <main+0x288>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b6a      	ldr	r3, [pc, #424]	; (8000890 <main+0x288>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f083 0301 	eor.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d010      	beq.n	8000718 <main+0x110>
 	 {
	 	 reset_d = __HAL_TIM_GET_COUNTER(&htim3); //Point de reference, nouvelle origine de l'encodeur
 80006f6:	4b60      	ldr	r3, [pc, #384]	; (8000878 <main+0x270>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b66      	ldr	r3, [pc, #408]	; (8000898 <main+0x290>)
 8000700:	601a      	str	r2, [r3, #0]
	 	 sum_inv = sum_inv + Pulse_Inv; //Somme de l'ensemble des ticks avant changement de sens de rotation
 8000702:	4b66      	ldr	r3, [pc, #408]	; (800089c <main+0x294>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b66      	ldr	r3, [pc, #408]	; (80008a0 <main+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a63      	ldr	r2, [pc, #396]	; (800089c <main+0x294>)
 800070e:	6013      	str	r3, [r2, #0]
	 	 Pulse_Inv = 0;
 8000710:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <main+0x298>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e14b      	b.n	80009b0 <main+0x3a8>
 	 }
	 else if (((ref ^ DIR) != false) & (DIR != false)) // Rising edge => Sens Dir -> inv
 8000718:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <main+0x28c>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b5c      	ldr	r3, [pc, #368]	; (8000890 <main+0x288>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	bf14      	ite	ne
 8000724:	2301      	movne	r3, #1
 8000726:	2300      	moveq	r3, #0
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b59      	ldr	r3, [pc, #356]	; (8000890 <main+0x288>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4013      	ands	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d010      	beq.n	8000758 <main+0x150>
 	 {
	 	 reset_inv = __HAL_TIM_GET_COUNTER(&htim3);
 8000736:	4b50      	ldr	r3, [pc, #320]	; (8000878 <main+0x270>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073c:	461a      	mov	r2, r3
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <main+0x29c>)
 8000740:	601a      	str	r2, [r3, #0]
	 	 sum_d = sum_d + Pulse_d;
 8000742:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <main+0x2a0>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b59      	ldr	r3, [pc, #356]	; (80008ac <main+0x2a4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a56      	ldr	r2, [pc, #344]	; (80008a8 <main+0x2a0>)
 800074e:	6013      	str	r3, [r2, #0]
	 	 Pulse_d = 0;
 8000750:	4b56      	ldr	r3, [pc, #344]	; (80008ac <main+0x2a4>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e12b      	b.n	80009b0 <main+0x3a8>
 	 }
	 else if (((ref ^ DIR) == false) & (DIR == false)) // Sens :dir post transition
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <main+0x28c>)
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <main+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <main+0x288>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	2b00      	cmp	r3, #0
 800077a:	f000 80a1 	beq.w	80008c0 <main+0x2b8>
 	 {
	 	 if (reset_d == 0)
 800077e:	4b46      	ldr	r3, [pc, #280]	; (8000898 <main+0x290>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d124      	bne.n	80007d0 <main+0x1c8>
	 	 {
	 	 	 if ((__HAL_TIM_GET_COUNTER(&htim3)) == (ARR_Val-offset_d))
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <main+0x270>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	4a48      	ldr	r2, [pc, #288]	; (80008b0 <main+0x2a8>)
 800078e:	6811      	ldr	r1, [r2, #0]
 8000790:	4a48      	ldr	r2, [pc, #288]	; (80008b4 <main+0x2ac>)
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	4293      	cmp	r3, r2
 8000798:	d110      	bne.n	80007bc <main+0x1b4>
	 	 	 {	while ((__HAL_TIM_GET_COUNTER(&htim3)) == (ARR_Val-offset_d)){} // Delay until CNT get's incremented by 1
 800079a:	bf00      	nop
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <main+0x270>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <main+0x2a8>)
 80007a4:	6811      	ldr	r1, [r2, #0]
 80007a6:	4a43      	ldr	r2, [pc, #268]	; (80008b4 <main+0x2ac>)
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	1a8a      	subs	r2, r1, r2
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d0f5      	beq.n	800079c <main+0x194>
	 	 		 d++;
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <main+0x2b0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a40      	ldr	r2, [pc, #256]	; (80008b8 <main+0x2b0>)
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e0f9      	b.n	80009b0 <main+0x3a8>
	 	 	 }

	 	 	 else
	 	 	{
	 	 		 Pulse_d = __HAL_TIM_GET_COUNTER(&htim3)+ offset_d ; //Valeur de ticks dans l'iteration courante
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <main+0x270>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <main+0x2ac>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <main+0x2a4>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e0ef      	b.n	80009b0 <main+0x3a8>

	 	 	}
	 	 }
	 	 else if ((reset_d != 0) & (flag != 0))
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <main+0x290>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf14      	ite	ne
 80007d8:	2301      	movne	r3, #1
 80007da:	2300      	moveq	r3, #0
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <main+0x2b4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <main+0x1f4>
	 	 {
	 		flag = 0; //Debut Iteration !=0
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <main+0x2b4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e0d9      	b.n	80009b0 <main+0x3a8>
	 	 }
	 	else if ((reset_d != 0) & (flag == 0))
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <main+0x290>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <main+0x2b4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf0c      	ite	eq
 8000812:	2301      	moveq	r3, #1
 8000814:	2300      	movne	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4013      	ands	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	f000 80c7 	beq.w	80009b0 <main+0x3a8>
	 	{
	 		if (__HAL_TIM_GET_COUNTER(&htim3) < ARR_Val)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <main+0x270>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <main+0x2a8>)
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	4293      	cmp	r3, r2
 800082e:	d20a      	bcs.n	8000846 <main+0x23e>
	 		{
	 			Pulse_d= __HAL_TIM_GET_COUNTER(&htim3) - reset_d +1; // Calcul de ticks a partir de nouvelle origine de l'encodeur
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <main+0x270>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <main+0x290>)
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	3301      	adds	r3, #1
 800083e:	461a      	mov	r2, r3
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <main+0x2a4>)
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e0b4      	b.n	80009b0 <main+0x3a8>

	 		}
	 		else
	 		{
	 			offset_d = (ARR_Val +1 - reset_d) ; // Offset Update so it looks like we are incrementing the counter (CNT) from 0
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <main+0x2a8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <main+0x290>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <main+0x2ac>)
 8000854:	6013      	str	r3, [r2, #0]
	 			reset_d = 0;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <main+0x290>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
	 			flag = 1 ; // Add the offset val to the pulses and start counting from 0
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <main+0x2b4>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e0a5      	b.n	80009b0 <main+0x3a8>
 8000864:	f3af 8000 	nop.w
 8000868:	d825c663 	.word	0xd825c663
 800086c:	406348c9 	.word	0x406348c9
 8000870:	58020800 	.word	0x58020800
 8000874:	2400013c 	.word	0x2400013c
 8000878:	2400026c 	.word	0x2400026c
 800087c:	240000f0 	.word	0x240000f0
 8000880:	240000a4 	.word	0x240000a4
 8000884:	24000000 	.word	0x24000000
 8000888:	24000058 	.word	0x24000058
 800088c:	40000400 	.word	0x40000400
 8000890:	24000218 	.word	0x24000218
 8000894:	24000219 	.word	0x24000219
 8000898:	24000068 	.word	0x24000068
 800089c:	24000078 	.word	0x24000078
 80008a0:	24000054 	.word	0x24000054
 80008a4:	2400006c 	.word	0x2400006c
 80008a8:	2400007c 	.word	0x2400007c
 80008ac:	24000050 	.word	0x24000050
 80008b0:	24000004 	.word	0x24000004
 80008b4:	24000070 	.word	0x24000070
 80008b8:	24000060 	.word	0x24000060
 80008bc:	24000008 	.word	0x24000008

	 		}
	 	}
 	 }
	 else if (((ref ^ DIR) == false) & (DIR != false)) // Sens :inv
 80008c0:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <main+0x3d8>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <main+0x3dc>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	bf0c      	ite	eq
 80008cc:	2301      	moveq	r3, #1
 80008ce:	2300      	movne	r3, #0
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <main+0x3dc>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4013      	ands	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d068      	beq.n	80009b0 <main+0x3a8>
 	 {
	 	 if (reset_inv == 0)
 80008de:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <main+0x3e0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d122      	bne.n	800092c <main+0x324>
	 	 {
	 	 	 if (__HAL_TIM_GET_COUNTER(&htim3) == offset_inv)
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <main+0x3e4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	4a40      	ldr	r2, [pc, #256]	; (80009f0 <main+0x3e8>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10d      	bne.n	8000910 <main+0x308>
	 	 	 {	while (__HAL_TIM_GET_COUNTER(&htim3) == offset_inv){}
 80008f4:	bf00      	nop
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <main+0x3e4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	4a3c      	ldr	r2, [pc, #240]	; (80009f0 <main+0x3e8>)
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	4293      	cmp	r3, r2
 8000902:	d0f8      	beq.n	80008f6 <main+0x2ee>
	 	 		 i++;
 8000904:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <main+0x3ec>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <main+0x3ec>)
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	e04f      	b.n	80009b0 <main+0x3a8>
	 	 	 }
	 	 	 else
			 {
				 Pulse_Inv = __HAL_TIM_GET_COUNTER(&htim3) - offset_inv - (ARR_Val +1) ;
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <main+0x3e4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	4a36      	ldr	r2, [pc, #216]	; (80009f0 <main+0x3e8>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <main+0x3f0>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	3b01      	subs	r3, #1
 8000924:	461a      	mov	r2, r3
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <main+0x3f4>)
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e041      	b.n	80009b0 <main+0x3a8>
			 }
	 	 }
	 	 else if ((reset_inv != 0) & (flag != 0))
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <main+0x3e0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <main+0x3f8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4013      	ands	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <main+0x350>
	 	 {
	 		 flag = 0;
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <main+0x3f8>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e02b      	b.n	80009b0 <main+0x3a8>
	 	 }
	 	else if ((reset_inv != 0) & (flag == 0))
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <main+0x3e0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <main+0x3f8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf0c      	ite	eq
 800096e:	2301      	moveq	r3, #1
 8000970:	2300      	movne	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4013      	ands	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d019      	beq.n	80009b0 <main+0x3a8>
	 	{
	 		if (__HAL_TIM_GET_COUNTER(&htim3) > 0)
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x3e4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00a      	beq.n	800099c <main+0x394>
	 		{
	 			Pulse_Inv = __HAL_TIM_GET_COUNTER(&htim3) - reset_inv - 1;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x3e4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <main+0x3e0>)
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	3b01      	subs	r3, #1
 8000994:	461a      	mov	r2, r3
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <main+0x3f4>)
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e009      	b.n	80009b0 <main+0x3a8>
	 		}
	 		else
	 		{
	 			offset_inv = reset_inv;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <main+0x3e0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <main+0x3e8>)
 80009a2:	6013      	str	r3, [r2, #0]
	 			reset_inv = 0;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <main+0x3e0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
	 			flag = 1 ;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <main+0x3f8>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]

	 		}
	 	}
 	 }

 Pulses =(d-i)*ARR_Val + Pulse_d  + sum_d + Pulse_Inv +sum_inv;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <main+0x3fc>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <main+0x3ec>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <main+0x3f0>)
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	fb02 f203 	mul.w	r2, r2, r3
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <main+0x400>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	441a      	add	r2, r3
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <main+0x404>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	441a      	add	r2, r3
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <main+0x3f4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	441a      	add	r2, r3
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <main+0x408>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <main+0x40c>)
 80009dc:	6013      	str	r3, [r2, #0]
	while(! (__HAL_TIM_GET_FLAG(&htim8,TIM_FLAG_CC3))) {}
 80009de:	e64b      	b.n	8000678 <main+0x70>
 80009e0:	24000219 	.word	0x24000219
 80009e4:	24000218 	.word	0x24000218
 80009e8:	2400006c 	.word	0x2400006c
 80009ec:	2400026c 	.word	0x2400026c
 80009f0:	24000074 	.word	0x24000074
 80009f4:	24000064 	.word	0x24000064
 80009f8:	24000004 	.word	0x24000004
 80009fc:	24000054 	.word	0x24000054
 8000a00:	24000008 	.word	0x24000008
 8000a04:	24000060 	.word	0x24000060
 8000a08:	24000050 	.word	0x24000050
 8000a0c:	2400007c 	.word	0x2400007c
 8000a10:	24000078 	.word	0x24000078
 8000a14:	2400005c 	.word	0x2400005c

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	; 0x70
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	224c      	movs	r2, #76	; 0x4c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 f8b6 	bl	8007b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2220      	movs	r2, #32
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 f8b0 	bl	8007b98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f001 fd71 	bl	8002520 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5a:	bf00      	nop
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a68:	d1f8      	bne.n	8000a5c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2321      	movs	r3, #33	; 0x21
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a74:	2301      	movs	r3, #1
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a84:	f240 1313 	movw	r3, #275	; 0x113
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fd74 	bl	8002594 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ab2:	f000 fedb 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2303      	movs	r3, #3
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2103      	movs	r1, #3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 f905 	bl	8002cec <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ae8:	f000 fec0 	bl	800186c <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3770      	adds	r7, #112	; 0x70
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024800 	.word	0x58024800

08000af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 549;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b20:	f240 2225 	movw	r2, #549	; 0x225
 8000b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b42:	f003 ff7b 	bl	8004a3c <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b4c:	f000 fe8e 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b5e:	f004 ff41 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b68:	f000 fe80 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM2_Init+0x98>)
 8000b7a:	f005 fdc9 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b84:	f000 fe72 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	240002d0 	.word	0x240002d0

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2224      	movs	r2, #36	; 0x24
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f006 fff8 	bl	8007b98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <MX_TIM3_Init+0xa8>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65531;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bc6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000be8:	230a      	movs	r3, #10
 8000bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000c04:	f004 faea 	bl	80051dc <HAL_TIM_Encoder_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c0e:	f000 fe2d 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM3_Init+0xa4>)
 8000c20:	f005 fd76 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c2a:	f000 fe1f 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2400026c 	.word	0x2400026c
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c74:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <MX_TIM4_Init+0xec>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c7a:	2263      	movs	r2, #99	; 0x63
 8000c7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c9a:	f003 fecf 	bl	8004a3c <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ca4:	f000 fde2 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000cb6:	f004 fe95 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000cc0:	f000 fdd4 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000cc6:	f003 ff97 	bl	8004bf8 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 fdcc 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000ce4:	f005 fd14 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f000 fdbd 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 8000cf6:	f241 3387 	movw	r3, #4999	; 0x1387
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	220c      	movs	r2, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000d0c:	f004 fd56 	bl	80057bc <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d16:	f000 fda9 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000d1c:	f000 fee4 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2400013c 	.word	0x2400013c
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <MX_TIM5_Init+0x98>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5499;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d56:	f241 527b 	movw	r2, #5499	; 0x157b
 8000d5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <MX_TIM5_Init+0x9c>)
 8000d66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d76:	f003 fe61 	bl	8004a3c <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d80:	f000 fd74 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d92:	f004 fe27 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d9c:	f000 fd66 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000dae:	f005 fcaf 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 fd58 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400021c 	.word	0x2400021c
 8000dc8:	40000c00 	.word	0x40000c00
 8000dcc:	0001869f 	.word	0x0001869f

08000dd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <MX_TIM8_Init+0xec>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e04:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 10;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e20:	220a      	movs	r2, #10
 8000e22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e2c:	f003 fe06 	bl	8004a3c <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000e36:	f000 fd19 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4619      	mov	r1, r3
 8000e46:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e48:	f004 fdcc 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000e52:	f000 fd0b 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e58:	f004 f84c 	bl	8004ef4 <HAL_TIM_IC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000e62:	f000 fd03 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000e7a:	f005 fc49 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8000e84:	f000 fcf2 	bl	800186c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8000e94:	230a      	movs	r3, #10
 8000e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM8_Init+0xe8>)
 8000ea0:	f004 fbef 	bl	8005682 <HAL_TIM_IC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8000eaa:	f000 fcdf 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240000f0 	.word	0x240000f0
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <MX_TIM23_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 549;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000ee6:	f240 2225 	movw	r2, #549	; 0x225
 8000eea:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000ef4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ef8:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000f08:	f003 fd98 	bl	8004a3c <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fcab 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000f24:	f004 fd5e 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000f2e:	f000 fc9d 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_TIM23_Init+0x98>)
 8000f40:	f005 fbe6 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000f4a:	f000 fc8f 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2400031c 	.word	0x2400031c
 8000f5c:	4000e000 	.word	0x4000e000

08000f60 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <MX_TIM24_Init+0x98>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 65530;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000f86:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000f8a:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 14;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000f94:	220e      	movs	r2, #14
 8000f96:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8000fa4:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000fa6:	f003 fd49 	bl	8004a3c <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8000fb0:	f000 fc5c 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000fc2:	f004 fd0f 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fc4e 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM24_Init+0x94>)
 8000fde:	f005 fb97 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8000fe8:	f000 fc40 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	240000a4 	.word	0x240000a4
 8000ff8:	4000e400 	.word	0x4000e400

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_USART3_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART3_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001046:	f005 fc1d 	bl	8006884 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 fc0c 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001058:	f006 fcb0 	bl	80079bc <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 fc03 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x90>)
 800106a:	f006 fce5 	bl	8007a38 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fbfa 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_USART3_UART_Init+0x90>)
 800107a:	f006 fc66 	bl	800794a <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 fbf2 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24000188 	.word	0x24000188
 8001090:	40004800 	.word	0x40004800

08001094 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4ba6      	ldr	r3, [pc, #664]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4aa4      	ldr	r2, [pc, #656]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4ba2      	ldr	r3, [pc, #648]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d8:	4b9e      	ldr	r3, [pc, #632]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a9d      	ldr	r2, [pc, #628]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b9a      	ldr	r3, [pc, #616]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b97      	ldr	r3, [pc, #604]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a95      	ldr	r2, [pc, #596]	; (8001354 <MX_GPIO_Init+0x2b0>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b93      	ldr	r3, [pc, #588]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b8f      	ldr	r3, [pc, #572]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	4a8e      	ldr	r2, [pc, #568]	; (8001354 <MX_GPIO_Init+0x2b0>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001124:	4b8b      	ldr	r3, [pc, #556]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a86      	ldr	r2, [pc, #536]	; (8001354 <MX_GPIO_Init+0x2b0>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b84      	ldr	r3, [pc, #528]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001150:	4b80      	ldr	r3, [pc, #512]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	4a7f      	ldr	r2, [pc, #508]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001160:	4b7c      	ldr	r3, [pc, #496]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	4b79      	ldr	r3, [pc, #484]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a77      	ldr	r2, [pc, #476]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b75      	ldr	r3, [pc, #468]	; (8001354 <MX_GPIO_Init+0x2b0>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C0_Pin|C2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2105      	movs	r1, #5
 8001190:	4871      	ldr	r0, [pc, #452]	; (8001358 <MX_GPIO_Init+0x2b4>)
 8001192:	f001 f987 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119c:	486f      	ldr	r0, [pc, #444]	; (800135c <MX_GPIO_Init+0x2b8>)
 800119e:	f001 f981 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	486d      	ldr	r0, [pc, #436]	; (8001360 <MX_GPIO_Init+0x2bc>)
 80011aa:	f001 f97b 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	486c      	ldr	r0, [pc, #432]	; (8001364 <MX_GPIO_Init+0x2c0>)
 80011b4:	f001 f976 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4862      	ldr	r0, [pc, #392]	; (8001358 <MX_GPIO_Init+0x2b4>)
 80011d0:	f000 ffc0 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C2_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin;
 80011d4:	2305      	movs	r3, #5
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	485b      	ldr	r0, [pc, #364]	; (8001358 <MX_GPIO_Init+0x2b4>)
 80011ec:	f000 ffb2 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011f0:	2332      	movs	r3, #50	; 0x32
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001200:	230b      	movs	r3, #11
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4853      	ldr	r0, [pc, #332]	; (8001358 <MX_GPIO_Init+0x2b4>)
 800120c:	f000 ffa2 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8001210:	2308      	movs	r3, #8
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	484d      	ldr	r0, [pc, #308]	; (8001358 <MX_GPIO_Init+0x2b4>)
 8001224:	f000 ff96 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001228:	2384      	movs	r3, #132	; 0x84
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4849      	ldr	r0, [pc, #292]	; (8001368 <MX_GPIO_Init+0x2c4>)
 8001244:	f000 ff86 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125a:	230b      	movs	r3, #11
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	483d      	ldr	r0, [pc, #244]	; (800135c <MX_GPIO_Init+0x2b8>)
 8001266:	f000 ff75 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800126a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4836      	ldr	r0, [pc, #216]	; (800135c <MX_GPIO_Init+0x2b8>)
 8001284:	f000 ff66 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	482f      	ldr	r0, [pc, #188]	; (8001360 <MX_GPIO_Init+0x2bc>)
 80012a2:	f000 ff57 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	482c      	ldr	r0, [pc, #176]	; (800136c <MX_GPIO_Init+0x2c8>)
 80012bc:	f000 ff4a 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <MX_GPIO_Init+0x2c4>)
 80012d6:	f000 ff3d 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012ec:	230a      	movs	r3, #10
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <MX_GPIO_Init+0x2c4>)
 80012f8:	f000 ff2c 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130e:	230b      	movs	r3, #11
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <MX_GPIO_Init+0x2c8>)
 800131a:	f000 ff1b 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800131e:	2302      	movs	r3, #2
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0x2c0>)
 8001336:	f000 ff0d 	bl	8002154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f000 fed3 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001344:	2028      	movs	r0, #40	; 0x28
 8001346:	f000 feea 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	58024400 	.word	0x58024400
 8001358:	58020800 	.word	0x58020800
 800135c:	58020400 	.word	0x58020400
 8001360:	58020c00 	.word	0x58020c00
 8001364:	58021000 	.word	0x58021000
 8001368:	58020000 	.word	0x58020000
 800136c:	58021800 	.word	0x58021800

08001370 <HAL_TIM_PeriodElapsedCallback>:
int diff_err_pos;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{ if ( htim == &htim2)
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4aa0      	ldr	r2, [pc, #640]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	f040 80b0 	bne.w	80014e2 <HAL_TIM_PeriodElapsedCallback+0x172>
  {
	v_flt = (1/((1/taux) +100))*((1/taux)*(speed + past_speed) - ((1/taux) - 100)*v_flt_past);
 8001382:	4b9f      	ldr	r3, [pc, #636]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800138c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001390:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0x294>
 8001394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800139c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013a0:	4b97      	ldr	r3, [pc, #604]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80013aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80013ae:	4b96      	ldr	r3, [pc, #600]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80013b0:	ed93 6a00 	vldr	s12, [r3]
 80013b4:	4b95      	ldr	r3, [pc, #596]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 80013be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013c2:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013c4:	ed93 6a00 	vldr	s12, [r3]
 80013c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80013cc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80013d0:	ed9f 6a8c 	vldr	s12, [pc, #560]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0x294>
 80013d4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80013d8:	4b8d      	ldr	r3, [pc, #564]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
	v_flt_past = v_flt;
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a86      	ldr	r2, [pc, #536]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013f6:	6013      	str	r3, [r2, #0]
	past_speed = speed;
 80013f8:	4b83      	ldr	r3, [pc, #524]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a83      	ldr	r2, [pc, #524]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013fe:	6013      	str	r3, [r2, #0]

	err = speed_d - speed;
 8001400:	4b85      	ldr	r3, [pc, #532]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	4b82      	ldr	r3, [pc, #520]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001412:	edc3 7a00 	vstr	s15, [r3]
	sum_err += err;
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001428:	edc3 7a00 	vstr	s15, [r3]
	diff_err = err - err_past;
 800142c:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
	err_past = err;
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a77      	ldr	r2, [pc, #476]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001448:	6013      	str	r3, [r2, #0]
	DutyC = Kp*err + Ki*sum_err + Kd*diff_err;
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b72      	ldr	r3, [pc, #456]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146e:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001470:	edd3 6a00 	vldr	s13, [r3]
 8001474:	4b6c      	ldr	r3, [pc, #432]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001484:	edc3 7a00 	vstr	s15, [r3]

	if (DutyC > 100)
 8001488:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001604 <HAL_TIM_PeriodElapsedCallback+0x294>
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	dd03      	ble.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x134>
						{ DutyC = 100 ; }
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800149e:	4a67      	ldr	r2, [pc, #412]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_TIM_PeriodElapsedCallback+0x14c>
	else if ( DutyC < 0)
 80014a4:	4b64      	ldr	r3, [pc, #400]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d503      	bpl.n	80014bc <HAL_TIM_PeriodElapsedCallback+0x14c>
						{ DutyC = 0 ;}
 80014b4:	4b60      	ldr	r3, [pc, #384]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

	ccr_reg = (int) ( DutyC * (13107/20) ) ;
 80014bc:	4b5e      	ldr	r3, [pc, #376]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 2a90 	vmov	r2, s15
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014d4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
{
	ref = (TIM3->CR1) & (1U << 4);
}


}
 80014e0:	e18f      	b.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x492>
else if ( htim == &htim23)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	f040 817c 	bne.w	80017e4 <HAL_TIM_PeriodElapsedCallback+0x474>
	err_pos = pulses_d - Pulses;
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80014f8:	6013      	str	r3, [r2, #0]
	sum_err_pos += err_pos;
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001506:	6013      	str	r3, [r2, #0]
	diff_err_pos = err_pos - err_past_pos;
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b54      	ldr	r3, [pc, #336]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001514:	6013      	str	r3, [r2, #0]
	err_past_pos = err_pos;
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a51      	ldr	r2, [pc, #324]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800151c:	6013      	str	r3, [r2, #0]
	speed_d = Kp1*err_pos + Ki1*sum_err_pos + Kd1*diff_err_pos;
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001534:	4b49      	ldr	r3, [pc, #292]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001540:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
	if (speed_d >= 0)
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	db18      	blt.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x240>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2101      	movs	r1, #1
 8001582:	483c      	ldr	r0, [pc, #240]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001584:	f000 ff8e 	bl	80024a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2104      	movs	r1, #4
 800158c:	4839      	ldr	r0, [pc, #228]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800158e:	f000 ff89 	bl	80024a4 <HAL_GPIO_WritePin>
			if (speed_d > 16)
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dd6c      	ble.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x310>
				speed_d = 16;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015a8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e067      	b.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x310>
		else if ( speed_d < 0)
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d55f      	bpl.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x310>
		{	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2101      	movs	r1, #1
 80015c4:	482b      	ldr	r0, [pc, #172]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015c6:	f000 ff6d 	bl	80024a4 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2104      	movs	r1, #4
 80015ce:	4829      	ldr	r0, [pc, #164]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015d0:	f000 ff68 	bl	80024a4 <HAL_GPIO_WritePin>
			if (speed_d > -16)
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	eebb 7a00 	vmov.f32	s14, #176	; 0xc1800000 -16.0
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	dd47      	ble.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x308>
				speed_d = - speed_d;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eef1 7a67 	vneg.f32	s15, s15
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
 80015f8:	e042      	b.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x310>
 80015fa:	bf00      	nop
 80015fc:	240002d0 	.word	0x240002d0
 8001600:	24000018 	.word	0x24000018
 8001604:	42c80000 	.word	0x42c80000
 8001608:	24000058 	.word	0x24000058
 800160c:	24000080 	.word	0x24000080
 8001610:	24000094 	.word	0x24000094
 8001614:	240002c0 	.word	0x240002c0
 8001618:	24000268 	.word	0x24000268
 800161c:	240002c4 	.word	0x240002c4
 8001620:	24000084 	.word	0x24000084
 8001624:	2400008c 	.word	0x2400008c
 8001628:	24000088 	.word	0x24000088
 800162c:	2400000c 	.word	0x2400000c
 8001630:	24000010 	.word	0x24000010
 8001634:	24000014 	.word	0x24000014
 8001638:	24000090 	.word	0x24000090
 800163c:	42c80000 	.word	0x42c80000
 8001640:	4423c000 	.word	0x4423c000
 8001644:	240002cc 	.word	0x240002cc
 8001648:	2400013c 	.word	0x2400013c
 800164c:	2400031c 	.word	0x2400031c
 8001650:	2400001c 	.word	0x2400001c
 8001654:	2400005c 	.word	0x2400005c
 8001658:	240002b8 	.word	0x240002b8
 800165c:	240002c8 	.word	0x240002c8
 8001660:	240000a0 	.word	0x240000a0
 8001664:	240002bc 	.word	0x240002bc
 8001668:	24000098 	.word	0x24000098
 800166c:	2400009c 	.word	0x2400009c
 8001670:	24000020 	.word	0x24000020
 8001674:	58020800 	.word	0x58020800
				speed_d = 16;
 8001678:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800167a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800167e:	601a      	str	r2, [r3, #0]
	err = speed_d - speed;
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001690:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001692:	edc3 7a00 	vstr	s15, [r3]
	sum_err += err;
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80016a8:	edc3 7a00 	vstr	s15, [r3]
	diff_err = err - err_past;
 80016ac:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
	err_past = err;
 80016c2:	4b57      	ldr	r3, [pc, #348]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80016c8:	6013      	str	r3, [r2, #0]
	DutyC = Kp*err + Ki*sum_err + Kd*diff_err;
 80016ca:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016da:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80016dc:	edd3 6a00 	vldr	s13, [r3]
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ee:	4b52      	ldr	r3, [pc, #328]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80016f0:	edd3 6a00 	vldr	s13, [r3]
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
	if (DutyC > 100)
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001840 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dd03      	ble.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x3b4>
						{ DutyC = 100 ; }
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800171e:	4a49      	ldr	r2, [pc, #292]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00b      	b.n	800173c <HAL_TIM_PeriodElapsedCallback+0x3cc>
	else if ( DutyC < 0)
 8001724:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d503      	bpl.n	800173c <HAL_TIM_PeriodElapsedCallback+0x3cc>
						{ DutyC = 0 ;}
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
	ccr_reg = (int) ( DutyC *  655.34) ;
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001746:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001810 <HAL_TIM_PeriodElapsedCallback+0x4a0>
 800174a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001752:	ee17 2a90 	vmov	r2, s15
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001758:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, ccr_reg);
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
	v_flt = (1/((1/taux) +100))*((1/taux)*(speed + past_speed) - ((1/taux) - 100)*v_flt_past);
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800176e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001772:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001840 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8001776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800177a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800177e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800178c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001792:	ed93 6a00 	vldr	s12, [r3]
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee76 7a27 	vadd.f32	s15, s12, s15
 80017a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80017a6:	ed93 6a00 	vldr	s12, [r3]
 80017aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80017ae:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80017b2:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8001840 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 80017b6:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80017ce:	edc3 7a00 	vstr	s15, [r3]
	v_flt_past = v_flt;
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80017d8:	6013      	str	r3, [r2, #0]
	past_speed = speed;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80017e0:	6013      	str	r3, [r2, #0]
}
 80017e2:	e00e      	b.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x492>
else if (htim == &htim24)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10a      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x492>
	ref = (TIM3->CR1) & (1U << 4);
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	51eb851f 	.word	0x51eb851f
 8001814:	40847ab8 	.word	0x40847ab8
 8001818:	24000268 	.word	0x24000268
 800181c:	24000058 	.word	0x24000058
 8001820:	240002c4 	.word	0x240002c4
 8001824:	24000084 	.word	0x24000084
 8001828:	2400008c 	.word	0x2400008c
 800182c:	24000088 	.word	0x24000088
 8001830:	2400000c 	.word	0x2400000c
 8001834:	24000010 	.word	0x24000010
 8001838:	24000014 	.word	0x24000014
 800183c:	24000090 	.word	0x24000090
 8001840:	42c80000 	.word	0x42c80000
 8001844:	42c80000 	.word	0x42c80000
 8001848:	240002cc 	.word	0x240002cc
 800184c:	2400013c 	.word	0x2400013c
 8001850:	24000018 	.word	0x24000018
 8001854:	24000080 	.word	0x24000080
 8001858:	24000094 	.word	0x24000094
 800185c:	240002c0 	.word	0x240002c0
 8001860:	240000a4 	.word	0x240000a4
 8001864:	40000400 	.word	0x40000400
 8001868:	24000219 	.word	0x24000219

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>
	...

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_MspInit+0x30>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x30>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x30>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	58024400 	.word	0x58024400

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d117      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80018d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018de:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80018e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	201c      	movs	r0, #28
 80018f2:	f000 fbfa 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f6:	201c      	movs	r0, #28
 80018f8:	f000 fc11 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80018fc:	e097      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM4)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_TIM_Base_MspInit+0x190>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d10f      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800190a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800190e:	4a4a      	ldr	r2, [pc, #296]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800191a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
}
 8001926:	e082      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM5)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a44      	ldr	r2, [pc, #272]	; (8001a40 <HAL_TIM_Base_MspInit+0x194>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10f      	bne.n	8001952 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001938:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	69bb      	ldr	r3, [r7, #24]
}
 8001950:	e06d      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM8)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_TIM_Base_MspInit+0x198>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d12f      	bne.n	80019bc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800195e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001962:	4a35      	ldr	r2, [pc, #212]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800196e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019aa:	2303      	movs	r3, #3
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4824      	ldr	r0, [pc, #144]	; (8001a48 <HAL_TIM_Base_MspInit+0x19c>)
 80019b6:	f000 fbcd 	bl	8002154 <HAL_GPIO_Init>
}
 80019ba:	e038      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM23)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_TIM_Base_MspInit+0x1a0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d117      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80019c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 80019d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	20a1      	movs	r0, #161	; 0xa1
 80019ea:	f000 fb7e 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80019ee:	20a1      	movs	r0, #161	; 0xa1
 80019f0:	f000 fb95 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 80019f4:	e01b      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
  else if(htim_base->Instance==TIM24)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_TIM_Base_MspInit+0x1a4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d116      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001a02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_TIM_Base_MspInit+0x18c>)
 8001a12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	20a2      	movs	r0, #162	; 0xa2
 8001a24:	f000 fb61 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8001a28:	20a2      	movs	r0, #162	; 0xa2
 8001a2a:	f000 fb78 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	; 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	40010400 	.word	0x40010400
 8001a48:	58020800 	.word	0x58020800
 8001a4c:	4000e000 	.word	0x4000e000
 8001a50:	4000e400 	.word	0x4000e400

08001a54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_TIM_Encoder_MspInit+0x88>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12d      	bne.n	8001ad2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4(NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ab2:	2330      	movs	r3, #48	; 0x30
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ace:	f000 fb41 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020400 	.word	0x58020400

08001ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11f      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_TIM_MspPostInit+0x70>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x70>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_TIM_MspPostInit+0x70>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_TIM_MspPostInit+0x74>)
 8001b46:	f000 fb05 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000800 	.word	0x40000800
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58020c00 	.word	0x58020c00

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b6      	sub	sp, #216	; 0xd8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	22b4      	movs	r2, #180	; 0xb4
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 f809 	bl	8007b98 <memset>
  if(huart->Instance==USART3)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_UART_MspInit+0xc0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d142      	bne.n	8001c16 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fc30 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001baa:	f7ff fe5f 	bl	800186c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0xc4>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c04:	2307      	movs	r3, #7
 8001c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0xc8>)
 8001c12:	f000 fa9f 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	37d8      	adds	r7, #216	; 0xd8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004800 	.word	0x40004800
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020c00 	.word	0x58020c00

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c78:	f000 f93c 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM2_IRQHandler+0x10>)
 8001c86:	f003 fbdd 	bl	8005444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	240002d0 	.word	0x240002d0

08001c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c9c:	f000 fc1b 	bl	80024d6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM23_IRQHandler+0x10>)
 8001caa:	f003 fbcb 	bl	8005444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2400031c 	.word	0x2400031c

08001cb8 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <TIM24_IRQHandler+0x10>)
 8001cbe:	f003 fbc1 	bl	8005444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	240000a4 	.word	0x240000a4

08001ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <SystemInit+0xd0>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <SystemInit+0xd0>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <SystemInit+0xd4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d807      	bhi.n	8001cfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <SystemInit+0xd4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 030f 	bic.w	r3, r3, #15
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <SystemInit+0xd4>)
 8001cf6:	f043 0307 	orr.w	r3, r3, #7
 8001cfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <SystemInit+0xd8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <SystemInit+0xd8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <SystemInit+0xd8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <SystemInit+0xd8>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4924      	ldr	r1, [pc, #144]	; (8001da4 <SystemInit+0xd8>)
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <SystemInit+0xdc>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <SystemInit+0xd4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <SystemInit+0xd4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 030f 	bic.w	r3, r3, #15
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <SystemInit+0xd4>)
 8001d30:	f043 0307 	orr.w	r3, r3, #7
 8001d34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <SystemInit+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <SystemInit+0xd8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <SystemInit+0xd8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <SystemInit+0xd8>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <SystemInit+0xe0>)
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <SystemInit+0xd8>)
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <SystemInit+0xe4>)
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <SystemInit+0xd8>)
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <SystemInit+0xe8>)
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <SystemInit+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <SystemInit+0xd8>)
 8001d62:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <SystemInit+0xe8>)
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <SystemInit+0xd8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <SystemInit+0xd8>)
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <SystemInit+0xe8>)
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <SystemInit+0xd8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <SystemInit+0xd8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <SystemInit+0xd8>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <SystemInit+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <SystemInit+0xec>)
 8001d8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d90:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	52002000 	.word	0x52002000
 8001da4:	58024400 	.word	0x58024400
 8001da8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dac:	02020200 	.word	0x02020200
 8001db0:	01ff0000 	.word	0x01ff0000
 8001db4:	01010280 	.word	0x01010280
 8001db8:	52004000 	.word	0x52004000

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc0:	f7ff ff84 	bl	8001ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	; (8001dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	; (8001e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f005 feb1 	bl	8007b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7fe fc0b 	bl	8000608 <main>
  bx  lr
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dfc:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 8001e00:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 8001e04:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 8001e08:	2400036c 	.word	0x2400036c

08001e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC3_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f95c 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e1c:	f001 f91c 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_Init+0x68>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	4913      	ldr	r1, [pc, #76]	; (8001e7c <HAL_Init+0x6c>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_Init+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_Init+0x6c>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_Init+0x70>)
 8001e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_Init+0x74>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f814 	bl	8001e88 <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e002      	b.n	8001e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fd05 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	08007bc0 	.word	0x08007bc0
 8001e80:	24000028 	.word	0x24000028
 8001e84:	24000024 	.word	0x24000024

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_InitTick+0x60>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e021      	b.n	8001ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_InitTick+0x64>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f941 	bl	800213a <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f90b 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_InitTick+0x68>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	24000030 	.word	0x24000030
 8001eec:	24000024 	.word	0x24000024
 8001ef0:	2400002c 	.word	0x2400002c

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	24000030 	.word	0x24000030
 8001f18:	24000368 	.word	0x24000368

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	24000368 	.word	0x24000368

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	05fa0000 	.word	0x05fa0000

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff40 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff33 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa4 	bl	8002090 <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002162:	4b86      	ldr	r3, [pc, #536]	; (800237c <HAL_GPIO_Init+0x228>)
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002166:	e18c      	b.n	8002482 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 817e 	beq.w	800247c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x44>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0203 	and.w	r2, r3, #3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80d8 	beq.w	800247c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022d2:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x230>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x234>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04a      	beq.n	80023ac <HAL_GPIO_Init+0x258>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_GPIO_Init+0x238>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02b      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_GPIO_Init+0x23c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_GPIO_Init+0x240>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_GPIO_Init+0x244>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_GPIO_Init+0x248>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_GPIO_Init+0x24c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_GPIO_Init+0x250>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x20a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_GPIO_Init+0x254>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x206>
 8002356:	2309      	movs	r3, #9
 8002358:	e029      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800235a:	230a      	movs	r3, #10
 800235c:	e027      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800235e:	2307      	movs	r3, #7
 8002360:	e025      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002362:	2306      	movs	r3, #6
 8002364:	e023      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002366:	2305      	movs	r3, #5
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800236a:	2304      	movs	r3, #4
 800236c:	e01f      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800236e:	2303      	movs	r3, #3
 8002370:	e01d      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002372:	2302      	movs	r3, #2
 8002374:	e01b      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002376:	2301      	movs	r3, #1
 8002378:	e019      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800237a:	bf00      	nop
 800237c:	58000080 	.word	0x58000080
 8002380:	58024400 	.word	0x58024400
 8002384:	58000400 	.word	0x58000400
 8002388:	58020000 	.word	0x58020000
 800238c:	58020400 	.word	0x58020400
 8002390:	58020800 	.word	0x58020800
 8002394:	58020c00 	.word	0x58020c00
 8002398:	58021000 	.word	0x58021000
 800239c:	58021400 	.word	0x58021400
 80023a0:	58021800 	.word	0x58021800
 80023a4:	58021c00 	.word	0x58021c00
 80023a8:	58022400 	.word	0x58022400
 80023ac:	2300      	movs	r3, #0
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_GPIO_Init+0x34c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae6b 	bne.w	8002168 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f804 	bl	800250a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00a      	beq.n	800254a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01f      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e01d      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	490f      	ldr	r1, [pc, #60]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800255a:	f7ff fcdf 	bl	8001f1c <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002560:	e009      	b.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002562:	f7ff fcdb 	bl	8001f1c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002570:	d901      	bls.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d1ee      	bne.n	8002562 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58024800 	.word	0x58024800

08002594 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e397      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b4:	4b9e      	ldr	r3, [pc, #632]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025be:	4b9c      	ldr	r3, [pc, #624]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d007      	beq.n	80025da <HAL_RCC_OscConfig+0x46>
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	2b18      	cmp	r3, #24
 80025ce:	d110      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x12c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d168      	bne.n	80026c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e371      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x76>
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a8b      	ldr	r2, [pc, #556]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e02e      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b87      	ldr	r3, [pc, #540]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a86      	ldr	r2, [pc, #536]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b84      	ldr	r3, [pc, #528]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a83      	ldr	r2, [pc, #524]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0xbc>
 8002636:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xd4>
 8002650:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a76      	ldr	r2, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff fc54 	bl	8001f1c <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fc50 	bl	8001f1c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e325      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268a:	4b69      	ldr	r3, [pc, #420]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xe4>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fc40 	bl	8001f1c <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff fc3c 	bl	8001f1c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e311      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x10c>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 808a 	beq.w	80027e4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026da:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_RCC_OscConfig+0x162>
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	2b18      	cmp	r3, #24
 80026ea:	d137      	bne.n	800275c <HAL_RCC_OscConfig+0x1c8>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d132      	bne.n	800275c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x17a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e2e3      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270e:	4b48      	ldr	r3, [pc, #288]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0219 	bic.w	r2, r3, #25
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4945      	ldr	r1, [pc, #276]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7ff fbfc 	bl	8001f1c <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7ff fbf8 	bl	8001f1c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2cd      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4936      	ldr	r1, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275a:	e043      	b.n	80027e4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d026      	beq.n	80027b2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0219 	bic.w	r2, r3, #25
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	492f      	ldr	r1, [pc, #188]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7ff fbd1 	bl	8001f1c <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff fbcd 	bl	8001f1c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2a2      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4921      	ldr	r1, [pc, #132]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff fbad 	bl	8001f1c <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fba9 	bl	8001f1c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e27e      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d06d      	beq.n	80028cc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d007      	beq.n	8002816 <HAL_RCC_OscConfig+0x282>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b18      	cmp	r3, #24
 800280a:	d11e      	bne.n	800284a <HAL_RCC_OscConfig+0x2b6>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d119      	bne.n	800284a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_OscConfig+0x29c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCC_OscConfig+0x2a0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d004      	beq.n	8002834 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e253      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
 800282e:	bf00      	nop
 8002830:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002834:	4ba3      	ldr	r3, [pc, #652]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	49a0      	ldr	r1, [pc, #640]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002844:	4313      	orrs	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002848:	e040      	b.n	80028cc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002852:	4b9c      	ldr	r3, [pc, #624]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a9b      	ldr	r2, [pc, #620]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff fb5d 	bl	8001f1c <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002866:	f7ff fb59 	bl	8001f1c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e22e      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002878:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002884:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	498c      	ldr	r1, [pc, #560]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800289a:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a89      	ldr	r2, [pc, #548]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 80028a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff fb39 	bl	8001f1c <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ae:	f7ff fb35 	bl	8001f1c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e20a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c0:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d036      	beq.n	8002946 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d019      	beq.n	8002914 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e0:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7ff fb16 	bl	8001f1c <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f4:	f7ff fb12 	bl	8001f1c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1e7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002906:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x360>
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7ff fafc 	bl	8001f1c <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002928:	f7ff faf8 	bl	8001f1c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1cd      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d036      	beq.n	80029c0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800295a:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002966:	f7ff fad9 	bl	8001f1c <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800296e:	f7ff fad5 	bl	8001f1c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1aa      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x3da>
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002998:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800299a:	f7ff fabf 	bl	8001f1c <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029a2:	f7ff fabb 	bl	8001f1c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e190      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8085 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_RCC_OscConfig+0x534>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a3d      	ldr	r2, [pc, #244]	; (8002ac8 <HAL_RCC_OscConfig+0x534>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029da:	f7ff fa9f 	bl	8001f1c <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7ff fa9b 	bl	8001f1c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e170      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x534>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x482>
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e02d      	b.n	8002a72 <HAL_RCC_OscConfig+0x4de>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4a4>
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e01c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4de>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x4c6>
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x4de>
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fa4f 	bl	8001f1c <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7ff fa4b 	bl	8001f1c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e11e      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_OscConfig+0x530>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4ee>
 8002aa4:	e018      	b.n	8002ad8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7ff fa39 	bl	8001f1c <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aac:	e00e      	b.n	8002acc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7ff fa35 	bl	8001f1c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d905      	bls.n	8002acc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e108      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002acc:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80f9 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	f000 80b4 	beq.w	8002c58 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	f040 8095 	bne.w	8002c24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a78      	ldr	r2, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7ff fa09 	bl	8001f1c <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7ff fa05 	bl	8001f1c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0da      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b20:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x750>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	4967      	ldr	r1, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	628b      	str	r3, [r1, #40]	; 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	3b01      	subs	r3, #1
 8002b56:	025b      	lsls	r3, r3, #9
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b76:	495a      	ldr	r1, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b88:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8c:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_OscConfig+0x754>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b94:	00d2      	lsls	r2, r2, #3
 8002b96:	4952      	ldr	r1, [pc, #328]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f023 020c 	bic.w	r2, r3, #12
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f023 0202 	bic.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4949      	ldr	r1, [pc, #292]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bc0:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a46      	ldr	r2, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002be4:	4b3e      	ldr	r3, [pc, #248]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	4a3d      	ldr	r2, [pc, #244]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f98e 	bl	8001f1c <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7ff f98a 	bl	8001f1c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e05f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c16:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x670>
 8002c22:	e057      	b.n	8002cd4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f974 	bl	8001f1c <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7ff f970 	bl	8001f1c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e045      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x6a4>
 8002c56:	e03d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x74c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d031      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0203 	and.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d12a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d122      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d11a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0a5b      	lsrs	r3, r3, #9
 8002c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d111      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0e1b      	lsrs	r3, r3, #24
 8002cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	fffffc0c 	.word	0xfffffc0c
 8002ce8:	ffff0007 	.word	0xffff0007

08002cec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e19c      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d910      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 020f 	bic.w	r2, r3, #15
 8002d16:	4985      	ldr	r1, [pc, #532]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e184      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d908      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d4c:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	4975      	ldr	r1, [pc, #468]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d908      	bls.n	8002d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	496a      	ldr	r1, [pc, #424]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d908      	bls.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	495e      	ldr	r1, [pc, #376]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d908      	bls.n	8002de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4953      	ldr	r1, [pc, #332]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f023 020f 	bic.w	r2, r3, #15
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4947      	ldr	r1, [pc, #284]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d055      	beq.n	8002ece <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4940      	ldr	r1, [pc, #256]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d121      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0f6      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0ea      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0de      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d6      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f023 0207 	bic.w	r2, r3, #7
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7ff f83d 	bl	8001f1c <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea6:	f7ff f839 	bl	8001f1c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0be      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d1eb      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d208      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d214      	bcs.n	8002f34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 020f 	bic.w	r2, r3, #15
 8002f12:	4906      	ldr	r1, [pc, #24]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_RCC_ClockConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e086      	b.n	800303a <HAL_RCC_ClockConfig+0x34e>
 8002f2c:	52002000 	.word	0x52002000
 8002f30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d208      	bcs.n	8002f62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f50:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	4939      	ldr	r1, [pc, #228]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d208      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	492e      	ldr	r1, [pc, #184]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d208      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4922      	ldr	r1, [pc, #136]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d010      	beq.n	8002fec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d208      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4917      	ldr	r1, [pc, #92]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fec:	f000 f834 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	4912      	ldr	r1, [pc, #72]	; (8003048 <HAL_RCC_ClockConfig+0x35c>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x358>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_RCC_ClockConfig+0x35c>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x360>)
 8003022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x364>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x368>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ff2a 	bl	8001e88 <HAL_InitTick>
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
 8003048:	08007bc0 	.word	0x08007bc0
 800304c:	24000028 	.word	0x24000028
 8003050:	24000024 	.word	0x24000024
 8003054:	2400002c 	.word	0x2400002c

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305e:	4bb3      	ldr	r3, [pc, #716]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003066:	2b18      	cmp	r3, #24
 8003068:	f200 8155 	bhi.w	8003316 <HAL_RCC_GetSysClockFreq+0x2be>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030d9 	.word	0x080030d9
 8003078:	08003317 	.word	0x08003317
 800307c:	08003317 	.word	0x08003317
 8003080:	08003317 	.word	0x08003317
 8003084:	08003317 	.word	0x08003317
 8003088:	08003317 	.word	0x08003317
 800308c:	08003317 	.word	0x08003317
 8003090:	08003317 	.word	0x08003317
 8003094:	080030ff 	.word	0x080030ff
 8003098:	08003317 	.word	0x08003317
 800309c:	08003317 	.word	0x08003317
 80030a0:	08003317 	.word	0x08003317
 80030a4:	08003317 	.word	0x08003317
 80030a8:	08003317 	.word	0x08003317
 80030ac:	08003317 	.word	0x08003317
 80030b0:	08003317 	.word	0x08003317
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003317 	.word	0x08003317
 80030bc:	08003317 	.word	0x08003317
 80030c0:	08003317 	.word	0x08003317
 80030c4:	08003317 	.word	0x08003317
 80030c8:	08003317 	.word	0x08003317
 80030cc:	08003317 	.word	0x08003317
 80030d0:	08003317 	.word	0x08003317
 80030d4:	0800310b 	.word	0x0800310b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d8:	4b94      	ldr	r3, [pc, #592]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030e4:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	08db      	lsrs	r3, r3, #3
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	4a90      	ldr	r2, [pc, #576]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030f6:	e111      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030f8:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030fa:	61bb      	str	r3, [r7, #24]
    break;
 80030fc:	e10e      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030fe:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003100:	61bb      	str	r3, [r7, #24]
    break;
 8003102:	e10b      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003104:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003106:	61bb      	str	r3, [r7, #24]
    break;
 8003108:	e108      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003114:	4b85      	ldr	r3, [pc, #532]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003120:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800312a:	4b80      	ldr	r3, [pc, #512]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80e1 	beq.w	8003310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b02      	cmp	r3, #2
 8003152:	f000 8083 	beq.w	800325c <HAL_RCC_GetSysClockFreq+0x204>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b02      	cmp	r3, #2
 800315a:	f200 80a1 	bhi.w	80032a0 <HAL_RCC_GetSysClockFreq+0x248>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x114>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d056      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800316a:	e099      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003178:	4b6c      	ldr	r3, [pc, #432]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	4a6b      	ldr	r2, [pc, #428]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031d2:	e087      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003216:	e065      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800325a:	e043      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800329e:	e021      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	0a5b      	lsrs	r3, r3, #9
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	3301      	adds	r3, #1
 80032f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003308:	ee17 3a90 	vmov	r3, s15
 800330c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800330e:	e005      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    break;
 8003314:	e002      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003318:	61bb      	str	r3, [r7, #24]
    break;
 800331a:	bf00      	nop
  }

  return sysclockfreq;
 800331c:	69bb      	ldr	r3, [r7, #24]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	58024400 	.word	0x58024400
 8003330:	03d09000 	.word	0x03d09000
 8003334:	003d0900 	.word	0x003d0900
 8003338:	007a1200 	.word	0x007a1200
 800333c:	46000000 	.word	0x46000000
 8003340:	4c742400 	.word	0x4c742400
 8003344:	4a742400 	.word	0x4a742400
 8003348:	4af42400 	.word	0x4af42400

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003352:	f7ff fe81 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_GetHCLKFreq+0x50>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490f      	ldr	r1, [pc, #60]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_GetHCLKFreq+0x50>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800338a:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	08007bc0 	.word	0x08007bc0
 80033a4:	24000028 	.word	0x24000028
 80033a8:	24000024 	.word	0x24000024

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033b0:	f7ff ffcc 	bl	800334c <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4904      	ldr	r1, [pc, #16]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	58024400 	.word	0x58024400
 80033d4:	08007bc0 	.word	0x08007bc0

080033d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033dc:	f7ff ffb6 	bl	800334c <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4904      	ldr	r1, [pc, #16]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400
 8003400:	08007bc0 	.word	0x08007bc0

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003410:	2300      	movs	r3, #0
 8003412:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d03f      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003428:	d02a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800342a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342e:	d824      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003434:	d018      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d81e      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003444:	d007      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003446:	e018      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4bab      	ldr	r3, [pc, #684]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	4aaa      	ldr	r2, [pc, #680]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003454:	e015      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f989 	bl	8004774 <RCCEx_PLL2_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003466:	e00c      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3324      	adds	r3, #36	; 0x24
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f001 fa32 	bl	80048d8 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003478:	e003      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
      break;
 800347e:	e000      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003488:	4b9b      	ldr	r3, [pc, #620]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	4998      	ldr	r1, [pc, #608]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	650b      	str	r3, [r1, #80]	; 0x50
 800349a:	e001      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d03d      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d826      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034d1 	.word	0x080034d1
 80034c0:	080034df 	.word	0x080034df
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003509 	.word	0x08003509
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d0:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a88      	ldr	r2, [pc, #544]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034dc:	e015      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f945 	bl	8004774 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ee:	e00c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f9ee 	bl	80048d8 <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
      break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003510:	4b79      	ldr	r3, [pc, #484]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	4976      	ldr	r1, [pc, #472]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	650b      	str	r3, [r1, #80]	; 0x50
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d051      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800353a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800353e:	d036      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003540:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003544:	d830      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800354a:	d032      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800354c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003550:	d82a      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003556:	d02e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003558:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800355c:	d824      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003562:	d018      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003568:	d81e      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003572:	d007      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003574:	e018      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4a5f      	ldr	r2, [pc, #380]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003582:	e019      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f8f2 	bl	8004774 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003594:	e010      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3324      	adds	r3, #36	; 0x24
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f001 f99b 	bl	80048d8 <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a6:	e007      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80035b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035be:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035cc:	494a      	ldr	r1, [pc, #296]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	658b      	str	r3, [r1, #88]	; 0x58
 80035d2:	e001      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d051      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80035ee:	d036      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80035f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80035f4:	d830      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80035f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035fa:	d032      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80035fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003600:	d82a      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003606:	d02e      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800360c:	d824      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800360e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003612:	d018      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003618:	d81e      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800361e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003622:	d007      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003624:	e018      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003626:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003632:	e019      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f001 f89a 	bl	8004774 <RCCEx_PLL2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003644:	e010      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3324      	adds	r3, #36	; 0x24
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 f943 	bl	80048d8 <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003656:	e007      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
      break;
 800365c:	e004      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800367c:	491e      	ldr	r1, [pc, #120]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	658b      	str	r3, [r1, #88]	; 0x58
 8003682:	e001      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d035      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d01c      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d817      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d00c      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d813      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d016      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d10f      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036bc:	e00e      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 f855 	bl	8004774 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80036da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	4902      	ldr	r1, [pc, #8]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036f4:	e004      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d047      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003714:	d030      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371a:	d82a      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800371c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003720:	d02c      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003726:	d824      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372c:	d018      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d81e      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d007      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800373e:	e018      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003740:	4bac      	ldr	r3, [pc, #688]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4aab      	ldr	r2, [pc, #684]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800374c:	e017      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 f80d 	bl	8004774 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800375e:	e00e      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3324      	adds	r3, #36	; 0x24
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f8b6 	bl	80048d8 <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003770:	e005      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
      break;
 8003776:	e002      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800377c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377e:	7dfb      	ldrb	r3, [r7, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003784:	4b9b      	ldr	r3, [pc, #620]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4998      	ldr	r1, [pc, #608]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	650b      	str	r3, [r1, #80]	; 0x50
 8003796:	e001      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d049      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d02e      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80037b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b6:	d828      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80037b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037bc:	d02a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80037be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c2:	d822      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80037c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c8:	d026      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80037ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037ce:	d81c      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80037d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d4:	d010      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80037d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037da:	d816      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01d      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d111      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 ffc1 	bl	8004774 <RCCEx_PLL2_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037f6:	e012      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f86a 	bl	80048d8 <RCCEx_PLL3_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003808:	e009      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
      break;
 800380e:	e006      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003810:	bf00      	nop
 8003812:	e004      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003814:	bf00      	nop
 8003816:	e002      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800381c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003824:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	4970      	ldr	r1, [pc, #448]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	650b      	str	r3, [r1, #80]	; 0x50
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d04b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800384e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003852:	d02e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003858:	d828      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d02a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d822      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800386a:	d026      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800386c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003870:	d81c      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003876:	d010      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800387c:	d816      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01d      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003886:	d111      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f000 ff70 	bl	8004774 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003898:	e012      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3324      	adds	r3, #36	; 0x24
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f819 	bl	80048d8 <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038aa:	e009      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80038be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038d4:	4947      	ldr	r1, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	658b      	str	r3, [r1, #88]	; 0x58
 80038da:	e001      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f4:	d00e      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80038f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fa:	d814      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003904:	d10f      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003912:	e00c      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 ff2a 	bl	8004774 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
      break;
 800392a:	e000      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800392c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003934:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003940:	492c      	ldr	r1, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003942:	4313      	orrs	r3, r2
 8003944:	650b      	str	r3, [r1, #80]	; 0x50
 8003946:	e001      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d032      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	2b03      	cmp	r3, #3
 800395e:	d81b      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800399f 	.word	0x0800399f
 800396c:	08003979 	.word	0x08003979
 8003970:	08003987 	.word	0x08003987
 8003974:	0800399f 	.word	0x0800399f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003984:	e00c      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fef1 	bl	8004774 <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800399e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4910      	ldr	r1, [pc, #64]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039b8:	e001      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 808a 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d8:	f7fe faa0 	bl	8001f1c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039de:	e00d      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7fe fa9c 	bl	8001f1c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d906      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	75fb      	strb	r3, [r7, #23]
        break;
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039f4:	58024400 	.word	0x58024400
 80039f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fc:	4bb9      	ldr	r3, [pc, #740]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0eb      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d166      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a0e:	4bb6      	ldr	r3, [pc, #728]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a18:	4053      	eors	r3, r2
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d013      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a22:	4bb1      	ldr	r3, [pc, #708]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a2c:	4bae      	ldr	r3, [pc, #696]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4aad      	ldr	r2, [pc, #692]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a38:	4bab      	ldr	r3, [pc, #684]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4aaa      	ldr	r2, [pc, #680]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a44:	4aa8      	ldr	r2, [pc, #672]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d115      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fe fa61 	bl	8001f1c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fe fa5d 	bl	8001f1c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d902      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	75fb      	strb	r3, [r7, #23]
            break;
 8003a74:	e005      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a76:	4b9c      	ldr	r3, [pc, #624]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ed      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d126      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003a98:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aa6:	0919      	lsrs	r1, r3, #4
 8003aa8:	4b90      	ldr	r3, [pc, #576]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003aaa:	400b      	ands	r3, r1
 8003aac:	498e      	ldr	r1, [pc, #568]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	610b      	str	r3, [r1, #16]
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003ab4:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	4a8b      	ldr	r2, [pc, #556]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003abe:	6113      	str	r3, [r2, #16]
 8003ac0:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	4986      	ldr	r1, [pc, #536]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	670b      	str	r3, [r1, #112]	; 0x70
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
 8003ada:	e001      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d07e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	2b28      	cmp	r3, #40	; 0x28
 8003af2:	d867      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003bcb 	.word	0x08003bcb
 8003b00:	08003bc5 	.word	0x08003bc5
 8003b04:	08003bc5 	.word	0x08003bc5
 8003b08:	08003bc5 	.word	0x08003bc5
 8003b0c:	08003bc5 	.word	0x08003bc5
 8003b10:	08003bc5 	.word	0x08003bc5
 8003b14:	08003bc5 	.word	0x08003bc5
 8003b18:	08003bc5 	.word	0x08003bc5
 8003b1c:	08003ba1 	.word	0x08003ba1
 8003b20:	08003bc5 	.word	0x08003bc5
 8003b24:	08003bc5 	.word	0x08003bc5
 8003b28:	08003bc5 	.word	0x08003bc5
 8003b2c:	08003bc5 	.word	0x08003bc5
 8003b30:	08003bc5 	.word	0x08003bc5
 8003b34:	08003bc5 	.word	0x08003bc5
 8003b38:	08003bc5 	.word	0x08003bc5
 8003b3c:	08003bb3 	.word	0x08003bb3
 8003b40:	08003bc5 	.word	0x08003bc5
 8003b44:	08003bc5 	.word	0x08003bc5
 8003b48:	08003bc5 	.word	0x08003bc5
 8003b4c:	08003bc5 	.word	0x08003bc5
 8003b50:	08003bc5 	.word	0x08003bc5
 8003b54:	08003bc5 	.word	0x08003bc5
 8003b58:	08003bc5 	.word	0x08003bc5
 8003b5c:	08003bcb 	.word	0x08003bcb
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003bc5 	.word	0x08003bc5
 8003b68:	08003bc5 	.word	0x08003bc5
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bc5 	.word	0x08003bc5
 8003b7c:	08003bcb 	.word	0x08003bcb
 8003b80:	08003bc5 	.word	0x08003bc5
 8003b84:	08003bc5 	.word	0x08003bc5
 8003b88:	08003bc5 	.word	0x08003bc5
 8003b8c:	08003bc5 	.word	0x08003bc5
 8003b90:	08003bc5 	.word	0x08003bc5
 8003b94:	08003bc5 	.word	0x08003bc5
 8003b98:	08003bc5 	.word	0x08003bc5
 8003b9c:	08003bcb 	.word	0x08003bcb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fde4 	bl	8004774 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3324      	adds	r3, #36	; 0x24
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe8d 	bl	80048d8 <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bd2:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bde:	4942      	ldr	r1, [pc, #264]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	654b      	str	r3, [r1, #84]	; 0x54
 8003be4:	e001      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d037      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d820      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c47 	.word	0x08003c47
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003c2f 	.word	0x08003c2f
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c47 	.word	0x08003c47
 8003c18:	08003c47 	.word	0x08003c47
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fda6 	bl	8004774 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fe4f 	bl	80048d8 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f023 0207 	bic.w	r2, r3, #7
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4923      	ldr	r1, [pc, #140]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c60:	e001      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d040      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d821      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cc7 	.word	0x08003cc7
 8003c88:	08003c9d 	.word	0x08003c9d
 8003c8c:	08003caf 	.word	0x08003caf
 8003c90:	08003cc7 	.word	0x08003cc7
 8003c94:	08003cc7 	.word	0x08003cc7
 8003c98:	08003cc7 	.word	0x08003cc7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd66 	bl	8004774 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3324      	adds	r3, #36	; 0x24
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fe0f 	bl	80048d8 <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d110      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	4902      	ldr	r1, [pc, #8]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ce2:	e007      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003ce4:	58024800 	.word	0x58024800
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d04b      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0a:	d02e      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d828      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d02a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d822      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d22:	d026      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d28:	d81c      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d34:	d816      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01d      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd14 	bl	8004774 <RCCEx_PLL2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d50:	e012      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fdbd 	bl	80048d8 <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d62:	e009      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e006      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e004      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7e:	4bb2      	ldr	r3, [pc, #712]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	49ae      	ldr	r1, [pc, #696]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	654b      	str	r3, [r1, #84]	; 0x54
 8003d92:	e001      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d04b      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dae:	d02e      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003db0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003db4:	d828      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d02a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d822      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc6:	d026      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dcc:	d81c      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d010      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd8:	d816      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01d      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d111      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fcc2 	bl	8004774 <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003df4:	e012      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fd6b 	bl	80048d8 <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e06:	e009      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e006      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e004      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e12:	bf00      	nop
 8003e14:	e002      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e22:	4b89      	ldr	r3, [pc, #548]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e30:	4985      	ldr	r1, [pc, #532]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	658b      	str	r3, [r1, #88]	; 0x58
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d04b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e52:	d02e      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003e54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e58:	d828      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5e:	d02a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d822      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e6a:	d026      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e70:	d81c      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e76:	d010      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7c:	d816      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01d      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e86:	d111      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fc70 	bl	8004774 <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e98:	e012      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fd19 	bl	80048d8 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ec6:	4b60      	ldr	r3, [pc, #384]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed4:	495c      	ldr	r1, [pc, #368]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eda:	e001      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d10a      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3324      	adds	r3, #36	; 0x24
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fceb 	bl	80048d8 <RCCEx_PLL3_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f18:	494b      	ldr	r1, [pc, #300]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d10a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3324      	adds	r3, #36	; 0x24
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fccb 	bl	80048d8 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	493b      	ldr	r1, [pc, #236]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d034      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f76:	d01d      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7c:	d817      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d009      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f88:	e011      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fbef 	bl	8004774 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3324      	adds	r3, #36	; 0x24
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fc98 	bl	80048d8 <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fca:	491f      	ldr	r1, [pc, #124]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	658b      	str	r3, [r1, #88]	; 0x58
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d036      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fec:	d01c      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ff2:	d816      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff8:	d003      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffe:	d007      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800400e:	e00c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fc5e 	bl	80048d8 <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	4902      	ldr	r1, [pc, #8]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004040:	4313      	orrs	r3, r2
 8004042:	654b      	str	r3, [r1, #84]	; 0x54
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d029      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800406a:	e00f      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004078:	e00b      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb77 	bl	8004774 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004098:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	4953      	ldr	r1, [pc, #332]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3324      	adds	r3, #36	; 0x24
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fc08 	bl	80048d8 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d030      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e6:	d017      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ec:	d811      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f2:	d013      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d80b      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d106      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a3a      	ldr	r2, [pc, #232]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004110:	e007      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004134:	492f      	ldr	r1, [pc, #188]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	654b      	str	r3, [r1, #84]	; 0x54
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800414c:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800414e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004158:	4926      	ldr	r1, [pc, #152]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800416a:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004176:	491f      	ldr	r1, [pc, #124]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800418e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004192:	6113      	str	r3, [r2, #16]
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419e:	4915      	ldr	r1, [pc, #84]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da08      	bge.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	490e      	ldr	r1, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d8:	4906      	ldr	r1, [pc, #24]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80041de:	7dbb      	ldrb	r3, [r7, #22]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400

080041f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041fc:	f7ff f8a6 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	58024400 	.word	0x58024400
 8004220:	08007bc0 	.word	0x08007bc0

08004224 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800422c:	4ba1      	ldr	r3, [pc, #644]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004236:	4b9f      	ldr	r3, [pc, #636]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	0b1b      	lsrs	r3, r3, #12
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004242:	4b9c      	ldr	r3, [pc, #624]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800424e:	4b99      	ldr	r3, [pc, #612]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	08db      	lsrs	r3, r3, #3
 8004254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8111 	beq.w	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f000 8083 	beq.w	8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b02      	cmp	r3, #2
 800427e:	f200 80a1 	bhi.w	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d056      	beq.n	800433c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800428e:	e099      	b.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004290:	4b88      	ldr	r3, [pc, #544]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02d      	beq.n	80042f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800429c:	4b85      	ldr	r3, [pc, #532]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	4a84      	ldr	r2, [pc, #528]	; (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c6:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042f6:	e087      	b.n	8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004302:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431a:	ed97 6a03 	vldr	s12, [r7, #12]
 800431e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433a:	e065      	b.n	8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434e:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004362:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800437e:	e043      	b.n	8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800438e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004392:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043c2:	e021      	b.n	8004408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004406:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	0a5b      	lsrs	r3, r3, #9
 800440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004422:	edd7 6a07 	vldr	s13, [r7, #28]
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	ee17 2a90 	vmov	r2, s15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004450:	edd7 6a07 	vldr	s13, [r7, #28]
 8004454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445c:	ee17 2a90 	vmov	r2, s15
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	0e1b      	lsrs	r3, r3, #24
 800446a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800447a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800447e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448a:	ee17 2a90 	vmov	r2, s15
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004492:	e008      	b.n	80044a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
}
 80044a6:	bf00      	nop
 80044a8:	3724      	adds	r7, #36	; 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
 80044b8:	03d09000 	.word	0x03d09000
 80044bc:	46000000 	.word	0x46000000
 80044c0:	4c742400 	.word	0x4c742400
 80044c4:	4a742400 	.word	0x4a742400
 80044c8:	4af42400 	.word	0x4af42400

080044cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b089      	sub	sp, #36	; 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d4:	4ba1      	ldr	r3, [pc, #644]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044de:	4b9f      	ldr	r3, [pc, #636]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	0d1b      	lsrs	r3, r3, #20
 80044e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044ea:	4b9c      	ldr	r3, [pc, #624]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044f6:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8111 	beq.w	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	f000 8083 	beq.w	8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b02      	cmp	r3, #2
 8004526:	f200 80a1 	bhi.w	800466c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d056      	beq.n	80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004536:	e099      	b.n	800466c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004538:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02d      	beq.n	80045a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004544:	4b85      	ldr	r3, [pc, #532]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	4a84      	ldr	r2, [pc, #528]	; (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456e:	4b7b      	ldr	r3, [pc, #492]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800459e:	e087      	b.n	80046b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e2:	e065      	b.n	80046b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800476c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a03 	vldr	s12, [r7, #12]
 800460a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004626:	e043      	b.n	80046b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a03 	vldr	s12, [r7, #12]
 800464e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466a:	e021      	b.n	80046b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800476c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b37      	ldr	r3, [pc, #220]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	0a5b      	lsrs	r3, r3, #9
 80046b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	ee17 2a90 	vmov	r2, s15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004704:	ee17 2a90 	vmov	r2, s15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	0e1b      	lsrs	r3, r3, #24
 8004712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004726:	edd7 6a07 	vldr	s13, [r7, #28]
 800472a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800473a:	e008      	b.n	800474e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	bf00      	nop
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
 8004760:	03d09000 	.word	0x03d09000
 8004764:	46000000 	.word	0x46000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4a742400 	.word	0x4a742400
 8004770:	4af42400 	.word	0x4af42400

08004774 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004782:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b03      	cmp	r3, #3
 800478c:	d101      	bne.n	8004792 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e099      	b.n	80048c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004792:	4b4f      	ldr	r3, [pc, #316]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4e      	ldr	r2, [pc, #312]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800479c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479e:	f7fd fbbd 	bl	8001f1c <HAL_GetTick>
 80047a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047a6:	f7fd fbb9 	bl	8001f1c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e086      	b.n	80048c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b8:	4b45      	ldr	r3, [pc, #276]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	493f      	ldr	r1, [pc, #252]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	628b      	str	r3, [r1, #40]	; 0x28
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	3b01      	subs	r3, #1
 80047de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	3b01      	subs	r3, #1
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004808:	4931      	ldr	r1, [pc, #196]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f023 0220 	bic.w	r2, r3, #32
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4928      	ldr	r1, [pc, #160]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004832:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004838:	f023 0310 	bic.w	r3, r3, #16
 800483c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <RCCEx_PLL2_Config+0x160>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	69d2      	ldr	r2, [r2, #28]
 800484a:	00d2      	lsls	r2, r2, #3
 800484c:	4920      	ldr	r1, [pc, #128]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004852:	4b1f      	ldr	r3, [pc, #124]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004858:	f043 0310 	orr.w	r3, r3, #16
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800486a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800486e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004870:	e00f      	b.n	8004892 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004884:	e005      	b.n	8004892 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 800488c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 8004898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800489c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489e:	f7fd fb3d 	bl	8001f1c <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048a6:	f7fd fb39 	bl	8001f1c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e006      	b.n	80048c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <RCCEx_PLL2_Config+0x15c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	ffff0007 	.word	0xffff0007

080048d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048e6:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d101      	bne.n	80048f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e099      	b.n	8004a2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048f6:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a4e      	ldr	r2, [pc, #312]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fd fb0b 	bl	8001f1c <HAL_GetTick>
 8004906:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004908:	e008      	b.n	800491c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800490a:	f7fd fb07 	bl	8001f1c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e086      	b.n	8004a2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800491c:	4b45      	ldr	r3, [pc, #276]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	493f      	ldr	r1, [pc, #252]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	628b      	str	r3, [r1, #40]	; 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	3b01      	subs	r3, #1
 8004942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	3b01      	subs	r3, #1
 800494c:	025b      	lsls	r3, r3, #9
 800494e:	b29b      	uxth	r3, r3
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	3b01      	subs	r3, #1
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800496c:	4931      	ldr	r1, [pc, #196]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	492d      	ldr	r1, [pc, #180]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004984:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4928      	ldr	r1, [pc, #160]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004996:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 800499c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <RCCEx_PLL3_Config+0x160>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	69d2      	ldr	r2, [r2, #28]
 80049ae:	00d2      	lsls	r2, r2, #3
 80049b0:	4920      	ldr	r1, [pc, #128]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049d4:	e00f      	b.n	80049f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049dc:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e8:	e005      	b.n	80049f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fd fa8b 	bl	8001f1c <HAL_GetTick>
 8004a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a0a:	f7fd fa87 	bl	8001f1c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e006      	b.n	8004a2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	58024400 	.word	0x58024400
 8004a38:	ffff0007 	.word	0xffff0007

08004a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e049      	b.n	8004ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc ff22 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f001 f8d2 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e05e      	b.n	8004bc2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02c      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d027      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d022      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xec>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d01d      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <HAL_TIM_Base_Start_IT+0xf0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <HAL_TIM_Base_Start_IT+0xf4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <HAL_TIM_Base_Start_IT+0xf8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <HAL_TIM_Base_Start_IT+0xfc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_TIM_Base_Start_IT+0x100>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x94>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_TIM_Base_Start_IT+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d115      	bne.n	8004bac <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_TIM_Base_Start_IT+0x108>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d015      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0xd2>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b98:	d011      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	e008      	b.n	8004bbe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40001800 	.word	0x40001800
 8004be8:	40014000 	.word	0x40014000
 8004bec:	4000e000 	.word	0x4000e000
 8004bf0:	4000e400 	.word	0x4000e400
 8004bf4:	00010007 	.word	0x00010007

08004bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e049      	b.n	8004c9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f841 	bl	8004ca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 fff4 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_TIM_PWM_Start+0x24>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e03c      	b.n	8004d5a <HAL_TIM_PWM_Start+0x9e>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d109      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x3e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e02f      	b.n	8004d5a <HAL_TIM_PWM_Start+0x9e>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d109      	bne.n	8004d14 <HAL_TIM_PWM_Start+0x58>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e022      	b.n	8004d5a <HAL_TIM_PWM_Start+0x9e>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d109      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x72>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e015      	b.n	8004d5a <HAL_TIM_PWM_Start+0x9e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x8c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e008      	b.n	8004d5a <HAL_TIM_PWM_Start+0x9e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0ab      	b.n	8004eba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Start+0xb6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	e023      	b.n	8004dba <HAL_TIM_PWM_Start+0xfe>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0xc6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	e01b      	b.n	8004dba <HAL_TIM_PWM_Start+0xfe>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xd6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	e013      	b.n	8004dba <HAL_TIM_PWM_Start+0xfe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xe6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	e00b      	b.n	8004dba <HAL_TIM_PWM_Start+0xfe>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0xf6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db0:	e003      	b.n	8004dba <HAL_TIM_PWM_Start+0xfe>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fc7e 	bl	80066c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <HAL_TIM_PWM_Start+0x208>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x13e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <HAL_TIM_PWM_Start+0x20c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x13e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <HAL_TIM_PWM_Start+0x210>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x13e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <HAL_TIM_PWM_Start+0x214>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x13e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a37      	ldr	r2, [pc, #220]	; (8004ed4 <HAL_TIM_PWM_Start+0x218>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_PWM_Start+0x142>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_PWM_Start+0x144>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <HAL_TIM_PWM_Start+0x208>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d02c      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d027      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <HAL_TIM_PWM_Start+0x21c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d022      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <HAL_TIM_PWM_Start+0x220>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d01d      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <HAL_TIM_PWM_Start+0x224>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_TIM_PWM_Start+0x20c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <HAL_TIM_PWM_Start+0x228>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_TIM_PWM_Start+0x210>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_TIM_PWM_Start+0x22c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_PWM_Start+0x1bc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_TIM_PWM_Start+0x230>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d115      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_TIM_PWM_Start+0x234>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d015      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1fa>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d011      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	e008      	b.n	8004eb6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	4000e000 	.word	0x4000e000
 8004eec:	4000e400 	.word	0x4000e400
 8004ef0:	00010007 	.word	0x00010007

08004ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e049      	b.n	8004f9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f841 	bl	8004fa2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fe76 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_IC_Start+0x1a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e023      	b.n	800501a <HAL_TIM_IC_Start+0x62>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start+0x2a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e01b      	b.n	800501a <HAL_TIM_IC_Start+0x62>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_IC_Start+0x3a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e013      	b.n	800501a <HAL_TIM_IC_Start+0x62>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b0c      	cmp	r3, #12
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start+0x4a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e00b      	b.n	800501a <HAL_TIM_IC_Start+0x62>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d104      	bne.n	8005012 <HAL_TIM_IC_Start+0x5a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e003      	b.n	800501a <HAL_TIM_IC_Start+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005018:	b2db      	uxtb	r3, r3
 800501a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_TIM_IC_Start+0x74>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e013      	b.n	8005054 <HAL_TIM_IC_Start+0x9c>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d104      	bne.n	800503c <HAL_TIM_IC_Start+0x84>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e00b      	b.n	8005054 <HAL_TIM_IC_Start+0x9c>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b08      	cmp	r3, #8
 8005040:	d104      	bne.n	800504c <HAL_TIM_IC_Start+0x94>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e003      	b.n	8005054 <HAL_TIM_IC_Start+0x9c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005052:	b2db      	uxtb	r3, r3
 8005054:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0a1      	b.n	80051aa <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_IC_Start+0xbe>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	e023      	b.n	80050be <HAL_TIM_IC_Start+0x106>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start+0xce>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	e01b      	b.n	80050be <HAL_TIM_IC_Start+0x106>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start+0xde>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	e013      	b.n	80050be <HAL_TIM_IC_Start+0x106>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_IC_Start+0xee>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	e00b      	b.n	80050be <HAL_TIM_IC_Start+0x106>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start+0xfe>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	e003      	b.n	80050be <HAL_TIM_IC_Start+0x106>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_IC_Start+0x116>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_IC_Start+0x13e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start+0x126>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_IC_Start+0x13e>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start+0x136>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_IC_Start+0x13e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fae0 	bl	80066c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <HAL_TIM_IC_Start+0x1fc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d027      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <HAL_TIM_IC_Start+0x200>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_TIM_IC_Start+0x204>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_TIM_IC_Start+0x208>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_TIM_IC_Start+0x20c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <HAL_TIM_IC_Start+0x210>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_IC_Start+0x214>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_TIM_IC_Start+0x218>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIM_IC_Start+0x1b0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIM_IC_Start+0x21c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d115      	bne.n	8005194 <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_TIM_IC_Start+0x220>)
 8005170:	4013      	ands	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b06      	cmp	r3, #6
 8005178:	d015      	beq.n	80051a6 <HAL_TIM_IC_Start+0x1ee>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d011      	beq.n	80051a6 <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	e008      	b.n	80051a6 <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40001800 	.word	0x40001800
 80051cc:	40014000 	.word	0x40014000
 80051d0:	4000e000 	.word	0x4000e000
 80051d4:	4000e400 	.word	0x4000e400
 80051d8:	00010007 	.word	0x00010007

080051dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e08f      	b.n	8005310 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fc fc25 	bl	8001a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6899      	ldr	r1, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_TIM_Encoder_Init+0x13c>)
 800521e:	400b      	ands	r3, r1
 8005220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fcf9 	bl	8005c24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4b31      	ldr	r3, [pc, #196]	; (800531c <HAL_TIM_Encoder_Init+0x140>)
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	4313      	orrs	r3, r2
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_TIM_Encoder_Init+0x144>)
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_TIM_Encoder_Init+0x148>)
 800527a:	4013      	ands	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	4313      	orrs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	4313      	orrs	r3, r2
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	fffebff8 	.word	0xfffebff8
 800531c:	fffffcfc 	.word	0xfffffcfc
 8005320:	fffff3f3 	.word	0xfffff3f3
 8005324:	ffff0f0f 	.word	0xffff0f0f

08005328 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005338:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005340:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005348:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005350:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d110      	bne.n	800537a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800535e:	7b7b      	ldrb	r3, [r7, #13]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e069      	b.n	800543c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005378:	e031      	b.n	80053de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d110      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d102      	bne.n	800538c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005386:	7b3b      	ldrb	r3, [r7, #12]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e055      	b.n	800543c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a0:	e01d      	b.n	80053de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d108      	bne.n	80053ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d105      	bne.n	80053ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ae:	7b7b      	ldrb	r3, [r7, #13]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d102      	bne.n	80053ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053b4:	7b3b      	ldrb	r3, [r7, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e03e      	b.n	800543c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_TIM_Encoder_Start+0xc4>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d008      	beq.n	80053fc <HAL_TIM_Encoder_Start+0xd4>
 80053ea:	e00f      	b.n	800540c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f965 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 80053fa:	e016      	b.n	800542a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	2104      	movs	r1, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f001 f95d 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 800540a:	e00e      	b.n	800542a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f955 	bl	80066c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	2104      	movs	r1, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f94e 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005428:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0202 	mvn.w	r2, #2
 8005470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fbae 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fba0 	bl	8005bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fbb1 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0204 	mvn.w	r2, #4
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fb84 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fb76 	bl	8005bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb87 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0208 	mvn.w	r2, #8
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2204      	movs	r2, #4
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fb5a 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb4c 	bl	8005bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fb5d 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b10      	cmp	r3, #16
 8005554:	d122      	bne.n	800559c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b10      	cmp	r3, #16
 8005562:	d11b      	bne.n	800559c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0210 	mvn.w	r2, #16
 800556c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2208      	movs	r2, #8
 8005572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fb30 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb22 	bl	8005bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fb33 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0201 	mvn.w	r2, #1
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb fed4 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d10e      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b80      	cmp	r3, #128	; 0x80
 80055e2:	d107      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f934 	bl	800685c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d10e      	bne.n	8005622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d107      	bne.n	8005622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 f927 	bl	8006870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d10e      	bne.n	800564e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d107      	bne.n	800564e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fae1 	bl	8005c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b20      	cmp	r3, #32
 800565a:	d10e      	bne.n	800567a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d107      	bne.n	800567a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0220 	mvn.w	r2, #32
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 f8e7 	bl	8006848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800569c:	2302      	movs	r3, #2
 800569e:	e088      	b.n	80057b2 <HAL_TIM_IC_ConfigChannel+0x130>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d11b      	bne.n	80056e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f000 fe2d 	bl	800631c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 020c 	bic.w	r2, r2, #12
 80056d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6999      	ldr	r1, [r3, #24]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]
 80056e4:	e060      	b.n	80057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d11c      	bne.n	8005726 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f000 febd 	bl	800647a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800570e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
 8005724:	e040      	b.n	80057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f000 ff0a 	bl	8006554 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 020c 	bic.w	r2, r2, #12
 800574e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69d9      	ldr	r1, [r3, #28]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	61da      	str	r2, [r3, #28]
 8005762:	e021      	b.n	80057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d11c      	bne.n	80057a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f000 ff27 	bl	80065cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800578c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
 80057a2:	e001      	b.n	80057a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e0ff      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b14      	cmp	r3, #20
 80057e6:	f200 80f0 	bhi.w	80059ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057ea:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005845 	.word	0x08005845
 80057f4:	080059cb 	.word	0x080059cb
 80057f8:	080059cb 	.word	0x080059cb
 80057fc:	080059cb 	.word	0x080059cb
 8005800:	08005885 	.word	0x08005885
 8005804:	080059cb 	.word	0x080059cb
 8005808:	080059cb 	.word	0x080059cb
 800580c:	080059cb 	.word	0x080059cb
 8005810:	080058c7 	.word	0x080058c7
 8005814:	080059cb 	.word	0x080059cb
 8005818:	080059cb 	.word	0x080059cb
 800581c:	080059cb 	.word	0x080059cb
 8005820:	08005907 	.word	0x08005907
 8005824:	080059cb 	.word	0x080059cb
 8005828:	080059cb 	.word	0x080059cb
 800582c:	080059cb 	.word	0x080059cb
 8005830:	08005949 	.word	0x08005949
 8005834:	080059cb 	.word	0x080059cb
 8005838:	080059cb 	.word	0x080059cb
 800583c:	080059cb 	.word	0x080059cb
 8005840:	08005989 	.word	0x08005989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fa90 	bl	8005d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0208 	orr.w	r2, r2, #8
 800585e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	619a      	str	r2, [r3, #24]
      break;
 8005882:	e0a5      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fb00 	bl	8005e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6999      	ldr	r1, [r3, #24]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	021a      	lsls	r2, r3, #8
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	619a      	str	r2, [r3, #24]
      break;
 80058c4:	e084      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fb69 	bl	8005fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0208 	orr.w	r2, r2, #8
 80058e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0204 	bic.w	r2, r2, #4
 80058f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69d9      	ldr	r1, [r3, #28]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	61da      	str	r2, [r3, #28]
      break;
 8005904:	e064      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fbd1 	bl	80060b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	61da      	str	r2, [r3, #28]
      break;
 8005946:	e043      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fc1a 	bl	8006188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0204 	bic.w	r2, r2, #4
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005986:	e023      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc5e 	bl	8006250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059c8:	e002      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop

080059e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_ConfigClockSource+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0dc      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x1d6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	4b6a      	ldr	r3, [pc, #424]	; (8005bc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a64      	ldr	r2, [pc, #400]	; (8005bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	f000 80a9 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a3c:	4a62      	ldr	r2, [pc, #392]	; (8005bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	f200 80ae 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a44:	4a61      	ldr	r2, [pc, #388]	; (8005bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 80a1 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a4c:	4a5f      	ldr	r2, [pc, #380]	; (8005bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f200 80a6 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a54:	4a5e      	ldr	r2, [pc, #376]	; (8005bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f000 8099 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a5c:	4a5c      	ldr	r2, [pc, #368]	; (8005bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f200 809e 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a68:	f000 8091 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a70:	f200 8096 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a78:	f000 8089 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a80:	f200 808e 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a88:	d03e      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x124>
 8005a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8e:	f200 8087 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	f000 8086 	beq.w	8005ba6 <HAL_TIM_ConfigClockSource+0x1c2>
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d87f      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aa0:	2b70      	cmp	r3, #112	; 0x70
 8005aa2:	d01a      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xf6>
 8005aa4:	2b70      	cmp	r3, #112	; 0x70
 8005aa6:	d87b      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d050      	beq.n	8005b4e <HAL_TIM_ConfigClockSource+0x16a>
 8005aac:	2b60      	cmp	r3, #96	; 0x60
 8005aae:	d877      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d03c      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x14a>
 8005ab4:	2b50      	cmp	r3, #80	; 0x50
 8005ab6:	d873      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d058      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x18a>
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d86f      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d064      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d86b      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d060      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d867      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d05c      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d05a      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ad8:	e062      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f000 fdcb 	bl	8006684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	609a      	str	r2, [r3, #8]
      break;
 8005b06:	e04f      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6899      	ldr	r1, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f000 fdb4 	bl	8006684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2a:	609a      	str	r2, [r3, #8]
      break;
 8005b2c:	e03c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f000 fc6e 	bl	800641c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2150      	movs	r1, #80	; 0x50
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fd7e 	bl	8006648 <TIM_ITRx_SetConfig>
      break;
 8005b4c:	e02c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6859      	ldr	r1, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f000 fcca 	bl	80064f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2160      	movs	r1, #96	; 0x60
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fd6e 	bl	8006648 <TIM_ITRx_SetConfig>
      break;
 8005b6c:	e01c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 fc4e 	bl	800641c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2140      	movs	r1, #64	; 0x40
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fd5e 	bl	8006648 <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e00c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f000 fd55 	bl	8006648 <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e003      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e000      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	ffceff88 	.word	0xffceff88
 8005bc8:	00100040 	.word	0x00100040
 8005bcc:	00100030 	.word	0x00100030
 8005bd0:	00100020 	.word	0x00100020

08005bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a44      	ldr	r2, [pc, #272]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a40      	ldr	r2, [pc, #256]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3f      	ldr	r2, [pc, #252]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3e      	ldr	r2, [pc, #248]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d023      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a30      	ldr	r2, [pc, #192]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01f      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01b      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d017      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <TIM_Base_SetConfig+0x140>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <TIM_Base_SetConfig+0x144>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_Base_SetConfig+0xaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <TIM_Base_SetConfig+0x148>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_Base_SetConfig+0x108>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_Base_SetConfig+0x108>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_Base_SetConfig+0x108>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_Base_SetConfig+0x108>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a0f      	ldr	r2, [pc, #60]	; (8005d64 <TIM_Base_SetConfig+0x140>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d103      	bne.n	8005d34 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	615a      	str	r2, [r3, #20]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800
 8005d68:	4000e000 	.word	0x4000e000
 8005d6c:	4000e400 	.word	0x4000e400

08005d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <TIM_OC1_SetConfig+0x108>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f023 0302 	bic.w	r3, r3, #2
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <TIM_OC1_SetConfig+0x10c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_OC1_SetConfig+0x7c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <TIM_OC1_SetConfig+0x110>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_OC1_SetConfig+0x7c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <TIM_OC1_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_OC1_SetConfig+0x7c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <TIM_OC1_SetConfig+0x118>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC1_SetConfig+0x7c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <TIM_OC1_SetConfig+0x11c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d10c      	bne.n	8005e06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0308 	bic.w	r3, r3, #8
 8005df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 0304 	bic.w	r3, r3, #4
 8005e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <TIM_OC1_SetConfig+0x10c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00f      	beq.n	8005e2e <TIM_OC1_SetConfig+0xbe>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <TIM_OC1_SetConfig+0x110>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <TIM_OC1_SetConfig+0xbe>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <TIM_OC1_SetConfig+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <TIM_OC1_SetConfig+0xbe>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <TIM_OC1_SetConfig+0x118>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC1_SetConfig+0xbe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <TIM_OC1_SetConfig+0x11c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d111      	bne.n	8005e52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	fffeff8f 	.word	0xfffeff8f
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f023 0210 	bic.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <TIM_OC2_SetConfig+0xfc>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0320 	bic.w	r3, r3, #32
 8005eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a29      	ldr	r2, [pc, #164]	; (8005f90 <TIM_OC2_SetConfig+0x100>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a28      	ldr	r2, [pc, #160]	; (8005f94 <TIM_OC2_SetConfig+0x104>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10d      	bne.n	8005f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <TIM_OC2_SetConfig+0x100>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <TIM_OC2_SetConfig+0xac>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <TIM_OC2_SetConfig+0x104>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_OC2_SetConfig+0xac>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <TIM_OC2_SetConfig+0x108>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_OC2_SetConfig+0xac>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <TIM_OC2_SetConfig+0x10c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC2_SetConfig+0xac>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <TIM_OC2_SetConfig+0x110>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d113      	bne.n	8005f64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	feff8fff 	.word	0xfeff8fff
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800

08005fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4b33      	ldr	r3, [pc, #204]	; (800609c <TIM_OC3_SetConfig+0xf8>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <TIM_OC3_SetConfig+0xfc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_OC3_SetConfig+0x66>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <TIM_OC3_SetConfig+0x100>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d10d      	bne.n	8006026 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <TIM_OC3_SetConfig+0xfc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_OC3_SetConfig+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <TIM_OC3_SetConfig+0x100>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_OC3_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <TIM_OC3_SetConfig+0x104>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_OC3_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <TIM_OC3_SetConfig+0x108>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC3_SetConfig+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <TIM_OC3_SetConfig+0x10c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d113      	bne.n	8006076 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	fffeff8f 	.word	0xfffeff8f
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <TIM_OC4_SetConfig+0xbc>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <TIM_OC4_SetConfig+0xc0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00f      	beq.n	8006134 <TIM_OC4_SetConfig+0x80>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <TIM_OC4_SetConfig+0xc4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00b      	beq.n	8006134 <TIM_OC4_SetConfig+0x80>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <TIM_OC4_SetConfig+0xc8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <TIM_OC4_SetConfig+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <TIM_OC4_SetConfig+0xcc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC4_SetConfig+0x80>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <TIM_OC4_SetConfig+0xd0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d109      	bne.n	8006148 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	019b      	lsls	r3, r3, #6
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	feff8fff 	.word	0xfeff8fff
 8006174:	40010000 	.word	0x40010000
 8006178:	40010400 	.word	0x40010400
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b21      	ldr	r3, [pc, #132]	; (8006238 <TIM_OC5_SetConfig+0xb0>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <TIM_OC5_SetConfig+0xb4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_OC5_SetConfig+0x76>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a17      	ldr	r2, [pc, #92]	; (8006240 <TIM_OC5_SetConfig+0xb8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_OC5_SetConfig+0x76>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <TIM_OC5_SetConfig+0xbc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_OC5_SetConfig+0x76>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <TIM_OC5_SetConfig+0xc0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC5_SetConfig+0x76>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <TIM_OC5_SetConfig+0xc4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d109      	bne.n	8006212 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006204:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	fffeff8f 	.word	0xfffeff8f
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800

08006250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4b22      	ldr	r3, [pc, #136]	; (8006304 <TIM_OC6_SetConfig+0xb4>)
 800627c:	4013      	ands	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	051b      	lsls	r3, r3, #20
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a19      	ldr	r2, [pc, #100]	; (8006308 <TIM_OC6_SetConfig+0xb8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_OC6_SetConfig+0x78>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <TIM_OC6_SetConfig+0xbc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_OC6_SetConfig+0x78>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a17      	ldr	r2, [pc, #92]	; (8006310 <TIM_OC6_SetConfig+0xc0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_OC6_SetConfig+0x78>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a16      	ldr	r2, [pc, #88]	; (8006314 <TIM_OC6_SetConfig+0xc4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC6_SetConfig+0x78>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a15      	ldr	r2, [pc, #84]	; (8006318 <TIM_OC6_SetConfig+0xc8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d109      	bne.n	80062dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	feff8fff 	.word	0xfeff8fff
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <TIM_TI1_SetConfig+0xdc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d023      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d01f      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <TIM_TI1_SetConfig+0xe0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01b      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <TIM_TI1_SetConfig+0xe4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d017      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <TIM_TI1_SetConfig+0xe8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <TIM_TI1_SetConfig+0xec>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_TI1_SetConfig+0xf0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <TIM_TI1_SetConfig+0xf4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a23      	ldr	r2, [pc, #140]	; (8006414 <TIM_TI1_SetConfig+0xf8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_TI1_SetConfig+0x76>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a22      	ldr	r2, [pc, #136]	; (8006418 <TIM_TI1_SetConfig+0xfc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <TIM_TI1_SetConfig+0x7a>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <TIM_TI1_SetConfig+0x7c>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e003      	b.n	80063b6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f023 030a 	bic.w	r3, r3, #10
 80063d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 030a 	and.w	r3, r3, #10
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40010400 	.word	0x40010400
 800640c:	40001800 	.word	0x40001800
 8006410:	40014000 	.word	0x40014000
 8006414:	4000e000 	.word	0x4000e000
 8006418:	4000e400 	.word	0x4000e400

0800641c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f023 030a 	bic.w	r3, r3, #10
 8006458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f023 0210 	bic.w	r2, r3, #16
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	b29b      	uxth	r3, r3
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	621a      	str	r2, [r3, #32]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f023 0210 	bic.w	r2, r3, #16
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800651e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	031b      	lsls	r3, r3, #12
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006590:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	b2db      	uxtb	r3, r3
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	031b      	lsls	r3, r3, #12
 8006610:	b29b      	uxth	r3, r3
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800661e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	031b      	lsls	r3, r3, #12
 8006624:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <TIM_ITRx_SetConfig+0x38>)
 800665c:	4013      	ands	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	f043 0307 	orr.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	609a      	str	r2, [r3, #8]
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	ffcfff8f 	.word	0xffcfff8f

08006684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	021a      	lsls	r2, r3, #8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e077      	b.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a35      	ldr	r2, [pc, #212]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a34      	ldr	r2, [pc, #208]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d108      	bne.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a25      	ldr	r2, [pc, #148]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d02c      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d027      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01d      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1b      	ldr	r2, [pc, #108]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1a      	ldr	r2, [pc, #104]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a18      	ldr	r2, [pc, #96]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10c      	bne.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40010000 	.word	0x40010000
 8006828:	40010400 	.word	0x40010400
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40001800 	.word	0x40001800
 800683c:	40014000 	.word	0x40014000
 8006840:	4000e000 	.word	0x4000e000
 8006844:	4000e400 	.word	0x4000e400

08006848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e042      	b.n	800691c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fb f959 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2224      	movs	r2, #36	; 0x24
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f82c 	bl	8006924 <UART_SetConfig>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e022      	b.n	800691c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fe7e 	bl	80075e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 ff05 	bl	8007724 <UART_CheckIdleState>
 800691a:	4603      	mov	r3, r0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006924:	b5b0      	push	{r4, r5, r7, lr}
 8006926:	b08e      	sub	sp, #56	; 0x38
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4313      	orrs	r3, r2
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4bbf      	ldr	r3, [pc, #764]	; (8006c50 <UART_SetConfig+0x32c>)
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800695a:	430b      	orrs	r3, r1
 800695c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4ab5      	ldr	r2, [pc, #724]	; (8006c54 <UART_SetConfig+0x330>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698a:	4313      	orrs	r3, r2
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	4bb0      	ldr	r3, [pc, #704]	; (8006c58 <UART_SetConfig+0x334>)
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6812      	ldr	r2, [r2, #0]
 800699c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800699e:	430b      	orrs	r3, r1
 80069a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	f023 010f 	bic.w	r1, r3, #15
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4aa7      	ldr	r2, [pc, #668]	; (8006c5c <UART_SetConfig+0x338>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d176      	bne.n	8006ab0 <UART_SetConfig+0x18c>
 80069c2:	4ba7      	ldr	r3, [pc, #668]	; (8006c60 <UART_SetConfig+0x33c>)
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ca:	2b28      	cmp	r3, #40	; 0x28
 80069cc:	d86c      	bhi.n	8006aa8 <UART_SetConfig+0x184>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0xb0>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a79 	.word	0x08006a79
 80069d8:	08006aa9 	.word	0x08006aa9
 80069dc:	08006aa9 	.word	0x08006aa9
 80069e0:	08006aa9 	.word	0x08006aa9
 80069e4:	08006aa9 	.word	0x08006aa9
 80069e8:	08006aa9 	.word	0x08006aa9
 80069ec:	08006aa9 	.word	0x08006aa9
 80069f0:	08006aa9 	.word	0x08006aa9
 80069f4:	08006a81 	.word	0x08006a81
 80069f8:	08006aa9 	.word	0x08006aa9
 80069fc:	08006aa9 	.word	0x08006aa9
 8006a00:	08006aa9 	.word	0x08006aa9
 8006a04:	08006aa9 	.word	0x08006aa9
 8006a08:	08006aa9 	.word	0x08006aa9
 8006a0c:	08006aa9 	.word	0x08006aa9
 8006a10:	08006aa9 	.word	0x08006aa9
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006aa9 	.word	0x08006aa9
 8006a1c:	08006aa9 	.word	0x08006aa9
 8006a20:	08006aa9 	.word	0x08006aa9
 8006a24:	08006aa9 	.word	0x08006aa9
 8006a28:	08006aa9 	.word	0x08006aa9
 8006a2c:	08006aa9 	.word	0x08006aa9
 8006a30:	08006aa9 	.word	0x08006aa9
 8006a34:	08006a91 	.word	0x08006a91
 8006a38:	08006aa9 	.word	0x08006aa9
 8006a3c:	08006aa9 	.word	0x08006aa9
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006aa9 	.word	0x08006aa9
 8006a4c:	08006aa9 	.word	0x08006aa9
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006a99 	.word	0x08006a99
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	08006aa9 	.word	0x08006aa9
 8006a60:	08006aa9 	.word	0x08006aa9
 8006a64:	08006aa9 	.word	0x08006aa9
 8006a68:	08006aa9 	.word	0x08006aa9
 8006a6c:	08006aa9 	.word	0x08006aa9
 8006a70:	08006aa9 	.word	0x08006aa9
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7e:	e326      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a86:	e322      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8e:	e31e      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e31a      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e316      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e312      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	e30e      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a6b      	ldr	r2, [pc, #428]	; (8006c64 <UART_SetConfig+0x340>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d130      	bne.n	8006b1c <UART_SetConfig+0x1f8>
 8006aba:	4b69      	ldr	r3, [pc, #420]	; (8006c60 <UART_SetConfig+0x33c>)
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d826      	bhi.n	8006b14 <UART_SetConfig+0x1f0>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0x1a8>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006aed 	.word	0x08006aed
 8006ad4:	08006af5 	.word	0x08006af5
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b05 	.word	0x08006b05
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aea:	e2f0      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af2:	e2ec      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afa:	e2e8      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b02:	e2e4      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b04:	2320      	movs	r3, #32
 8006b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0a:	e2e0      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b12:	e2dc      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1a:	e2d8      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a51      	ldr	r2, [pc, #324]	; (8006c68 <UART_SetConfig+0x344>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d130      	bne.n	8006b88 <UART_SetConfig+0x264>
 8006b26:	4b4e      	ldr	r3, [pc, #312]	; (8006c60 <UART_SetConfig+0x33c>)
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d826      	bhi.n	8006b80 <UART_SetConfig+0x25c>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x214>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b56:	e2ba      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5e:	e2b6      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b66:	e2b2      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6e:	e2ae      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b70:	2320      	movs	r3, #32
 8006b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b76:	e2aa      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e2a6      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	e2a2      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <UART_SetConfig+0x348>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d130      	bne.n	8006bf4 <UART_SetConfig+0x2d0>
 8006b92:	4b33      	ldr	r3, [pc, #204]	; (8006c60 <UART_SetConfig+0x33c>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	d826      	bhi.n	8006bec <UART_SetConfig+0x2c8>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0x280>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	08006bcd 	.word	0x08006bcd
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc2:	e284      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bca:	e280      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd2:	e27c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bda:	e278      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be2:	e274      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bea:	e270      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e26c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <UART_SetConfig+0x34c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d142      	bne.n	8006c84 <UART_SetConfig+0x360>
 8006bfe:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <UART_SetConfig+0x33c>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d838      	bhi.n	8006c7c <UART_SetConfig+0x358>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x2ec>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2e:	e24e      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c36:	e24a      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3e:	e246      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c46:	e242      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4e:	e23e      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c50:	cfff69f3 	.word	0xcfff69f3
 8006c54:	58000c00 	.word	0x58000c00
 8006c58:	11fff4ff 	.word	0x11fff4ff
 8006c5c:	40011000 	.word	0x40011000
 8006c60:	58024400 	.word	0x58024400
 8006c64:	40004400 	.word	0x40004400
 8006c68:	40004800 	.word	0x40004800
 8006c6c:	40004c00 	.word	0x40004c00
 8006c70:	40005000 	.word	0x40005000
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7a:	e228      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c82:	e224      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4ab1      	ldr	r2, [pc, #708]	; (8006f50 <UART_SetConfig+0x62c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d176      	bne.n	8006d7c <UART_SetConfig+0x458>
 8006c8e:	4bb1      	ldr	r3, [pc, #708]	; (8006f54 <UART_SetConfig+0x630>)
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c96:	2b28      	cmp	r3, #40	; 0x28
 8006c98:	d86c      	bhi.n	8006d74 <UART_SetConfig+0x450>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x37c>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006d45 	.word	0x08006d45
 8006ca4:	08006d75 	.word	0x08006d75
 8006ca8:	08006d75 	.word	0x08006d75
 8006cac:	08006d75 	.word	0x08006d75
 8006cb0:	08006d75 	.word	0x08006d75
 8006cb4:	08006d75 	.word	0x08006d75
 8006cb8:	08006d75 	.word	0x08006d75
 8006cbc:	08006d75 	.word	0x08006d75
 8006cc0:	08006d4d 	.word	0x08006d4d
 8006cc4:	08006d75 	.word	0x08006d75
 8006cc8:	08006d75 	.word	0x08006d75
 8006ccc:	08006d75 	.word	0x08006d75
 8006cd0:	08006d75 	.word	0x08006d75
 8006cd4:	08006d75 	.word	0x08006d75
 8006cd8:	08006d75 	.word	0x08006d75
 8006cdc:	08006d75 	.word	0x08006d75
 8006ce0:	08006d55 	.word	0x08006d55
 8006ce4:	08006d75 	.word	0x08006d75
 8006ce8:	08006d75 	.word	0x08006d75
 8006cec:	08006d75 	.word	0x08006d75
 8006cf0:	08006d75 	.word	0x08006d75
 8006cf4:	08006d75 	.word	0x08006d75
 8006cf8:	08006d75 	.word	0x08006d75
 8006cfc:	08006d75 	.word	0x08006d75
 8006d00:	08006d5d 	.word	0x08006d5d
 8006d04:	08006d75 	.word	0x08006d75
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006d75 	.word	0x08006d75
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006d75 	.word	0x08006d75
 8006d18:	08006d75 	.word	0x08006d75
 8006d1c:	08006d75 	.word	0x08006d75
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d75 	.word	0x08006d75
 8006d28:	08006d75 	.word	0x08006d75
 8006d2c:	08006d75 	.word	0x08006d75
 8006d30:	08006d75 	.word	0x08006d75
 8006d34:	08006d75 	.word	0x08006d75
 8006d38:	08006d75 	.word	0x08006d75
 8006d3c:	08006d75 	.word	0x08006d75
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4a:	e1c0      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d52:	e1bc      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d54:	2308      	movs	r3, #8
 8006d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5a:	e1b8      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d62:	e1b4      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d64:	2320      	movs	r3, #32
 8006d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6a:	e1b0      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d72:	e1ac      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d74:	2380      	movs	r3, #128	; 0x80
 8006d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7a:	e1a8      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a75      	ldr	r2, [pc, #468]	; (8006f58 <UART_SetConfig+0x634>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d130      	bne.n	8006de8 <UART_SetConfig+0x4c4>
 8006d86:	4b73      	ldr	r3, [pc, #460]	; (8006f54 <UART_SetConfig+0x630>)
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d826      	bhi.n	8006de0 <UART_SetConfig+0x4bc>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x474>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006db1 	.word	0x08006db1
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006dc1 	.word	0x08006dc1
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db6:	e18a      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dbe:	e186      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc6:	e182      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dce:	e17e      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd6:	e17a      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dde:	e176      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de6:	e172      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5b      	ldr	r2, [pc, #364]	; (8006f5c <UART_SetConfig+0x638>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d130      	bne.n	8006e54 <UART_SetConfig+0x530>
 8006df2:	4b58      	ldr	r3, [pc, #352]	; (8006f54 <UART_SetConfig+0x630>)
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d826      	bhi.n	8006e4c <UART_SetConfig+0x528>
 8006dfe:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0x4e0>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e1d 	.word	0x08006e1d
 8006e08:	08006e25 	.word	0x08006e25
 8006e0c:	08006e2d 	.word	0x08006e2d
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e3d 	.word	0x08006e3d
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e22:	e154      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e24:	2304      	movs	r3, #4
 8006e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2a:	e150      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e32:	e14c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e34:	2310      	movs	r3, #16
 8006e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3a:	e148      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e42:	e144      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e44:	2340      	movs	r3, #64	; 0x40
 8006e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4a:	e140      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e52:	e13c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a41      	ldr	r2, [pc, #260]	; (8006f60 <UART_SetConfig+0x63c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	f040 8082 	bne.w	8006f64 <UART_SetConfig+0x640>
 8006e60:	4b3c      	ldr	r3, [pc, #240]	; (8006f54 <UART_SetConfig+0x630>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e68:	2b28      	cmp	r3, #40	; 0x28
 8006e6a:	d86d      	bhi.n	8006f48 <UART_SetConfig+0x624>
 8006e6c:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <UART_SetConfig+0x550>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006f19 	.word	0x08006f19
 8006e78:	08006f49 	.word	0x08006f49
 8006e7c:	08006f49 	.word	0x08006f49
 8006e80:	08006f49 	.word	0x08006f49
 8006e84:	08006f49 	.word	0x08006f49
 8006e88:	08006f49 	.word	0x08006f49
 8006e8c:	08006f49 	.word	0x08006f49
 8006e90:	08006f49 	.word	0x08006f49
 8006e94:	08006f21 	.word	0x08006f21
 8006e98:	08006f49 	.word	0x08006f49
 8006e9c:	08006f49 	.word	0x08006f49
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f49 	.word	0x08006f49
 8006ea8:	08006f49 	.word	0x08006f49
 8006eac:	08006f49 	.word	0x08006f49
 8006eb0:	08006f49 	.word	0x08006f49
 8006eb4:	08006f29 	.word	0x08006f29
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f49 	.word	0x08006f49
 8006ec4:	08006f49 	.word	0x08006f49
 8006ec8:	08006f49 	.word	0x08006f49
 8006ecc:	08006f49 	.word	0x08006f49
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f31 	.word	0x08006f31
 8006ed8:	08006f49 	.word	0x08006f49
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f49 	.word	0x08006f49
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f39 	.word	0x08006f39
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f49 	.word	0x08006f49
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e0d6      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f20:	2304      	movs	r3, #4
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	e0d2      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f28:	2308      	movs	r3, #8
 8006f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2e:	e0ce      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f30:	2310      	movs	r3, #16
 8006f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f36:	e0ca      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f38:	2320      	movs	r3, #32
 8006f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3e:	e0c6      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f40:	2340      	movs	r3, #64	; 0x40
 8006f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f46:	e0c2      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f4e:	e0be      	b.n	80070ce <UART_SetConfig+0x7aa>
 8006f50:	40011400 	.word	0x40011400
 8006f54:	58024400 	.word	0x58024400
 8006f58:	40007800 	.word	0x40007800
 8006f5c:	40007c00 	.word	0x40007c00
 8006f60:	40011800 	.word	0x40011800
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4aad      	ldr	r2, [pc, #692]	; (8007220 <UART_SetConfig+0x8fc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d176      	bne.n	800705c <UART_SetConfig+0x738>
 8006f6e:	4bad      	ldr	r3, [pc, #692]	; (8007224 <UART_SetConfig+0x900>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f76:	2b28      	cmp	r3, #40	; 0x28
 8006f78:	d86c      	bhi.n	8007054 <UART_SetConfig+0x730>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0x65c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08007025 	.word	0x08007025
 8006f84:	08007055 	.word	0x08007055
 8006f88:	08007055 	.word	0x08007055
 8006f8c:	08007055 	.word	0x08007055
 8006f90:	08007055 	.word	0x08007055
 8006f94:	08007055 	.word	0x08007055
 8006f98:	08007055 	.word	0x08007055
 8006f9c:	08007055 	.word	0x08007055
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	08007055 	.word	0x08007055
 8006fa8:	08007055 	.word	0x08007055
 8006fac:	08007055 	.word	0x08007055
 8006fb0:	08007055 	.word	0x08007055
 8006fb4:	08007055 	.word	0x08007055
 8006fb8:	08007055 	.word	0x08007055
 8006fbc:	08007055 	.word	0x08007055
 8006fc0:	08007035 	.word	0x08007035
 8006fc4:	08007055 	.word	0x08007055
 8006fc8:	08007055 	.word	0x08007055
 8006fcc:	08007055 	.word	0x08007055
 8006fd0:	08007055 	.word	0x08007055
 8006fd4:	08007055 	.word	0x08007055
 8006fd8:	08007055 	.word	0x08007055
 8006fdc:	08007055 	.word	0x08007055
 8006fe0:	0800703d 	.word	0x0800703d
 8006fe4:	08007055 	.word	0x08007055
 8006fe8:	08007055 	.word	0x08007055
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08007055 	.word	0x08007055
 8006ff4:	08007055 	.word	0x08007055
 8006ff8:	08007055 	.word	0x08007055
 8006ffc:	08007055 	.word	0x08007055
 8007000:	08007045 	.word	0x08007045
 8007004:	08007055 	.word	0x08007055
 8007008:	08007055 	.word	0x08007055
 800700c:	08007055 	.word	0x08007055
 8007010:	08007055 	.word	0x08007055
 8007014:	08007055 	.word	0x08007055
 8007018:	08007055 	.word	0x08007055
 800701c:	08007055 	.word	0x08007055
 8007020:	0800704d 	.word	0x0800704d
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702a:	e050      	b.n	80070ce <UART_SetConfig+0x7aa>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e04c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e048      	b.n	80070ce <UART_SetConfig+0x7aa>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007042:	e044      	b.n	80070ce <UART_SetConfig+0x7aa>
 8007044:	2320      	movs	r3, #32
 8007046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800704a:	e040      	b.n	80070ce <UART_SetConfig+0x7aa>
 800704c:	2340      	movs	r3, #64	; 0x40
 800704e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007052:	e03c      	b.n	80070ce <UART_SetConfig+0x7aa>
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800705a:	e038      	b.n	80070ce <UART_SetConfig+0x7aa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a71      	ldr	r2, [pc, #452]	; (8007228 <UART_SetConfig+0x904>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d130      	bne.n	80070c8 <UART_SetConfig+0x7a4>
 8007066:	4b6f      	ldr	r3, [pc, #444]	; (8007224 <UART_SetConfig+0x900>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	2b05      	cmp	r3, #5
 8007070:	d826      	bhi.n	80070c0 <UART_SetConfig+0x79c>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x754>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007091 	.word	0x08007091
 800707c:	08007099 	.word	0x08007099
 8007080:	080070a1 	.word	0x080070a1
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2302      	movs	r3, #2
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e01a      	b.n	80070ce <UART_SetConfig+0x7aa>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e016      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e012      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ae:	e00e      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070b6:	e00a      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070be:	e006      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c6:	e002      	b.n	80070ce <UART_SetConfig+0x7aa>
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a55      	ldr	r2, [pc, #340]	; (8007228 <UART_SetConfig+0x904>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	f040 80f0 	bne.w	80072ba <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070de:	2b20      	cmp	r3, #32
 80070e0:	dc46      	bgt.n	8007170 <UART_SetConfig+0x84c>
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	db75      	blt.n	80071d2 <UART_SetConfig+0x8ae>
 80070e6:	3b02      	subs	r3, #2
 80070e8:	2b1e      	cmp	r3, #30
 80070ea:	d872      	bhi.n	80071d2 <UART_SetConfig+0x8ae>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x7d0>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007177 	.word	0x08007177
 80070f8:	080071d3 	.word	0x080071d3
 80070fc:	0800717f 	.word	0x0800717f
 8007100:	080071d3 	.word	0x080071d3
 8007104:	080071d3 	.word	0x080071d3
 8007108:	080071d3 	.word	0x080071d3
 800710c:	0800718f 	.word	0x0800718f
 8007110:	080071d3 	.word	0x080071d3
 8007114:	080071d3 	.word	0x080071d3
 8007118:	080071d3 	.word	0x080071d3
 800711c:	080071d3 	.word	0x080071d3
 8007120:	080071d3 	.word	0x080071d3
 8007124:	080071d3 	.word	0x080071d3
 8007128:	080071d3 	.word	0x080071d3
 800712c:	0800719f 	.word	0x0800719f
 8007130:	080071d3 	.word	0x080071d3
 8007134:	080071d3 	.word	0x080071d3
 8007138:	080071d3 	.word	0x080071d3
 800713c:	080071d3 	.word	0x080071d3
 8007140:	080071d3 	.word	0x080071d3
 8007144:	080071d3 	.word	0x080071d3
 8007148:	080071d3 	.word	0x080071d3
 800714c:	080071d3 	.word	0x080071d3
 8007150:	080071d3 	.word	0x080071d3
 8007154:	080071d3 	.word	0x080071d3
 8007158:	080071d3 	.word	0x080071d3
 800715c:	080071d3 	.word	0x080071d3
 8007160:	080071d3 	.word	0x080071d3
 8007164:	080071d3 	.word	0x080071d3
 8007168:	080071d3 	.word	0x080071d3
 800716c:	080071c5 	.word	0x080071c5
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d02a      	beq.n	80071ca <UART_SetConfig+0x8a6>
 8007174:	e02d      	b.n	80071d2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007176:	f7fd f83f 	bl	80041f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800717a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800717c:	e02f      	b.n	80071de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd f84e 	bl	8004224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800718c:	e027      	b.n	80071de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	4618      	mov	r0, r3
 8007194:	f7fd f99a 	bl	80044cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800719c:	e01f      	b.n	80071de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <UART_SetConfig+0x900>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <UART_SetConfig+0x900>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <UART_SetConfig+0x908>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071bc:	e00f      	b.n	80071de <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80071be:	4b1b      	ldr	r3, [pc, #108]	; (800722c <UART_SetConfig+0x908>)
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071c2:	e00c      	b.n	80071de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071c4:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <UART_SetConfig+0x90c>)
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071c8:	e009      	b.n	80071de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071d0:	e005      	b.n	80071de <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80071dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 81e6 	beq.w	80075b2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	4a12      	ldr	r2, [pc, #72]	; (8007234 <UART_SetConfig+0x910>)
 80071ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	6a3a      	ldr	r2, [r7, #32]
 8007206:	429a      	cmp	r2, r3
 8007208:	d305      	bcc.n	8007216 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	429a      	cmp	r2, r3
 8007214:	d910      	bls.n	8007238 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800721c:	e1c9      	b.n	80075b2 <UART_SetConfig+0xc8e>
 800721e:	bf00      	nop
 8007220:	40011c00 	.word	0x40011c00
 8007224:	58024400 	.word	0x58024400
 8007228:	58000c00 	.word	0x58000c00
 800722c:	03d09000 	.word	0x03d09000
 8007230:	003d0900 	.word	0x003d0900
 8007234:	08007bd0 	.word	0x08007bd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	4618      	mov	r0, r3
 800723c:	f04f 0100 	mov.w	r1, #0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	4ac1      	ldr	r2, [pc, #772]	; (800754c <UART_SetConfig+0xc28>)
 8007246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724a:	b29a      	uxth	r2, r3
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	f7f9 f85e 	bl	8000310 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4610      	mov	r0, r2
 800725a:	4619      	mov	r1, r3
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	020b      	lsls	r3, r1, #8
 8007266:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800726a:	0202      	lsls	r2, r0, #8
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	6849      	ldr	r1, [r1, #4]
 8007270:	0849      	lsrs	r1, r1, #1
 8007272:	4608      	mov	r0, r1
 8007274:	f04f 0100 	mov.w	r1, #0
 8007278:	1814      	adds	r4, r2, r0
 800727a:	eb43 0501 	adc.w	r5, r3, r1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f9 f840 	bl	8000310 <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4613      	mov	r3, r2
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729e:	d308      	bcc.n	80072b2 <UART_SetConfig+0x98e>
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a6:	d204      	bcs.n	80072b2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	e17f      	b.n	80075b2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80072b8:	e17b      	b.n	80075b2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c2:	f040 80bd 	bne.w	8007440 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80072c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	dc48      	bgt.n	8007360 <UART_SetConfig+0xa3c>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	db7b      	blt.n	80073ca <UART_SetConfig+0xaa6>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d879      	bhi.n	80073ca <UART_SetConfig+0xaa6>
 80072d6:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <UART_SetConfig+0x9b8>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007367 	.word	0x08007367
 80072e0:	0800736f 	.word	0x0800736f
 80072e4:	080073cb 	.word	0x080073cb
 80072e8:	080073cb 	.word	0x080073cb
 80072ec:	08007377 	.word	0x08007377
 80072f0:	080073cb 	.word	0x080073cb
 80072f4:	080073cb 	.word	0x080073cb
 80072f8:	080073cb 	.word	0x080073cb
 80072fc:	08007387 	.word	0x08007387
 8007300:	080073cb 	.word	0x080073cb
 8007304:	080073cb 	.word	0x080073cb
 8007308:	080073cb 	.word	0x080073cb
 800730c:	080073cb 	.word	0x080073cb
 8007310:	080073cb 	.word	0x080073cb
 8007314:	080073cb 	.word	0x080073cb
 8007318:	080073cb 	.word	0x080073cb
 800731c:	08007397 	.word	0x08007397
 8007320:	080073cb 	.word	0x080073cb
 8007324:	080073cb 	.word	0x080073cb
 8007328:	080073cb 	.word	0x080073cb
 800732c:	080073cb 	.word	0x080073cb
 8007330:	080073cb 	.word	0x080073cb
 8007334:	080073cb 	.word	0x080073cb
 8007338:	080073cb 	.word	0x080073cb
 800733c:	080073cb 	.word	0x080073cb
 8007340:	080073cb 	.word	0x080073cb
 8007344:	080073cb 	.word	0x080073cb
 8007348:	080073cb 	.word	0x080073cb
 800734c:	080073cb 	.word	0x080073cb
 8007350:	080073cb 	.word	0x080073cb
 8007354:	080073cb 	.word	0x080073cb
 8007358:	080073cb 	.word	0x080073cb
 800735c:	080073bd 	.word	0x080073bd
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d02e      	beq.n	80073c2 <UART_SetConfig+0xa9e>
 8007364:	e031      	b.n	80073ca <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007366:	f7fc f821 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 800736a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800736c:	e033      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736e:	f7fc f833 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 8007372:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007374:	e02f      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	4618      	mov	r0, r3
 800737c:	f7fc ff52 	bl	8004224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007384:	e027      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007386:	f107 0308 	add.w	r3, r7, #8
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd f89e 	bl	80044cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007394:	e01f      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007396:	4b6e      	ldr	r3, [pc, #440]	; (8007550 <UART_SetConfig+0xc2c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073a2:	4b6b      	ldr	r3, [pc, #428]	; (8007550 <UART_SetConfig+0xc2c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	08db      	lsrs	r3, r3, #3
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	4a69      	ldr	r2, [pc, #420]	; (8007554 <UART_SetConfig+0xc30>)
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b4:	e00f      	b.n	80073d6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80073b6:	4b67      	ldr	r3, [pc, #412]	; (8007554 <UART_SetConfig+0xc30>)
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ba:	e00c      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073bc:	4b66      	ldr	r3, [pc, #408]	; (8007558 <UART_SetConfig+0xc34>)
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073c0:	e009      	b.n	80073d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073c8:	e005      	b.n	80073d6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80073d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80ea 	beq.w	80075b2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	4a5a      	ldr	r2, [pc, #360]	; (800754c <UART_SetConfig+0xc28>)
 80073e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f0:	005a      	lsls	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	441a      	add	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d916      	bls.n	8007438 <UART_SetConfig+0xb14>
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007410:	d212      	bcs.n	8007438 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	b29b      	uxth	r3, r3
 8007416:	f023 030f 	bic.w	r3, r3, #15
 800741a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	b29b      	uxth	r3, r3
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	b29a      	uxth	r2, r3
 8007428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800742a:	4313      	orrs	r3, r2
 800742c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	e0bc      	b.n	80075b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800743e:	e0b8      	b.n	80075b2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007444:	2b20      	cmp	r3, #32
 8007446:	dc4b      	bgt.n	80074e0 <UART_SetConfig+0xbbc>
 8007448:	2b00      	cmp	r3, #0
 800744a:	f2c0 8087 	blt.w	800755c <UART_SetConfig+0xc38>
 800744e:	2b20      	cmp	r3, #32
 8007450:	f200 8084 	bhi.w	800755c <UART_SetConfig+0xc38>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0xb38>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	080074e7 	.word	0x080074e7
 8007460:	080074ef 	.word	0x080074ef
 8007464:	0800755d 	.word	0x0800755d
 8007468:	0800755d 	.word	0x0800755d
 800746c:	080074f7 	.word	0x080074f7
 8007470:	0800755d 	.word	0x0800755d
 8007474:	0800755d 	.word	0x0800755d
 8007478:	0800755d 	.word	0x0800755d
 800747c:	08007507 	.word	0x08007507
 8007480:	0800755d 	.word	0x0800755d
 8007484:	0800755d 	.word	0x0800755d
 8007488:	0800755d 	.word	0x0800755d
 800748c:	0800755d 	.word	0x0800755d
 8007490:	0800755d 	.word	0x0800755d
 8007494:	0800755d 	.word	0x0800755d
 8007498:	0800755d 	.word	0x0800755d
 800749c:	08007517 	.word	0x08007517
 80074a0:	0800755d 	.word	0x0800755d
 80074a4:	0800755d 	.word	0x0800755d
 80074a8:	0800755d 	.word	0x0800755d
 80074ac:	0800755d 	.word	0x0800755d
 80074b0:	0800755d 	.word	0x0800755d
 80074b4:	0800755d 	.word	0x0800755d
 80074b8:	0800755d 	.word	0x0800755d
 80074bc:	0800755d 	.word	0x0800755d
 80074c0:	0800755d 	.word	0x0800755d
 80074c4:	0800755d 	.word	0x0800755d
 80074c8:	0800755d 	.word	0x0800755d
 80074cc:	0800755d 	.word	0x0800755d
 80074d0:	0800755d 	.word	0x0800755d
 80074d4:	0800755d 	.word	0x0800755d
 80074d8:	0800755d 	.word	0x0800755d
 80074dc:	0800753d 	.word	0x0800753d
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d02e      	beq.n	8007542 <UART_SetConfig+0xc1e>
 80074e4:	e03a      	b.n	800755c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e6:	f7fb ff61 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 80074ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074ec:	e03c      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ee:	f7fb ff73 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 80074f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074f4:	e038      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f6:	f107 0314 	add.w	r3, r7, #20
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc fe92 	bl	8004224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007504:	e030      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	4618      	mov	r0, r3
 800750c:	f7fc ffde 	bl	80044cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007514:	e028      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007516:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <UART_SetConfig+0xc2c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <UART_SetConfig+0xc2c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	4a09      	ldr	r2, [pc, #36]	; (8007554 <UART_SetConfig+0xc30>)
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007534:	e018      	b.n	8007568 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <UART_SetConfig+0xc30>)
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800753a:	e015      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <UART_SetConfig+0xc34>)
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007540:	e012      	b.n	8007568 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007548:	e00e      	b.n	8007568 <UART_SetConfig+0xc44>
 800754a:	bf00      	nop
 800754c:	08007bd0 	.word	0x08007bd0
 8007550:	58024400 	.word	0x58024400
 8007554:	03d09000 	.word	0x03d09000
 8007558:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007566:	bf00      	nop
    }

    if (pclk != 0U)
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d021      	beq.n	80075b2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	4a1a      	ldr	r2, [pc, #104]	; (80075dc <UART_SetConfig+0xcb8>)
 8007574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007578:	461a      	mov	r2, r3
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	441a      	add	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	2b0f      	cmp	r3, #15
 8007596:	d909      	bls.n	80075ac <UART_SetConfig+0xc88>
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759e:	d205      	bcs.n	80075ac <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e002      	b.n	80075b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3738      	adds	r7, #56	; 0x38
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bdb0      	pop	{r4, r5, r7, pc}
 80075da:	bf00      	nop
 80075dc:	08007bd0 	.word	0x08007bd0

080075e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01a      	beq.n	80076f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076de:	d10a      	bne.n	80076f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007734:	f7fa fbf2 	bl	8001f1c <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b08      	cmp	r3, #8
 8007746:	d10e      	bne.n	8007766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f82f 	bl	80077ba <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e025      	b.n	80077b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b04      	cmp	r3, #4
 8007772:	d10e      	bne.n	8007792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f819 	bl	80077ba <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e00f      	b.n	80077b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b09c      	sub	sp, #112	; 0x70
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ca:	e0a9      	b.n	8007920 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	f000 80a5 	beq.w	8007920 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d6:	f7fa fba1 	bl	8001f1c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d302      	bcc.n	80077ec <UART_WaitOnFlagUntilTimeout+0x32>
 80077e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d140      	bne.n	800786e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007800:	667b      	str	r3, [r7, #100]	; 0x64
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	663b      	str	r3, [r7, #96]	; 0x60
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800783e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800784c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e069      	b.n	8007942 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d051      	beq.n	8007920 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788a:	d149      	bne.n	8007920 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007894:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
 80078b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e6      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	613b      	str	r3, [r7, #16]
   return(result);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3308      	adds	r3, #8
 80078e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078e8:	623a      	str	r2, [r7, #32]
 80078ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	69f9      	ldr	r1, [r7, #28]
 80078ee:	6a3a      	ldr	r2, [r7, #32]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e5      	bne.n	80078c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e010      	b.n	8007942 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4013      	ands	r3, r2
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	bf0c      	ite	eq
 8007930:	2301      	moveq	r3, #1
 8007932:	2300      	movne	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	429a      	cmp	r2, r3
 800793c:	f43f af46 	beq.w	80077cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3770      	adds	r7, #112	; 0x70
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_UARTEx_DisableFifoMode+0x16>
 800795c:	2302      	movs	r3, #2
 800795e:	e027      	b.n	80079b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	; 0x24
 800796c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800798e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e02d      	b.n	8007a30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2224      	movs	r2, #36	; 0x24
 80079e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0201 	bic.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f84f 	bl	8007ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e02d      	b.n	8007aac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2224      	movs	r2, #36	; 0x24
 8007a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0201 	bic.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f811 	bl	8007ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ad4:	e031      	b.n	8007b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ada:	2310      	movs	r3, #16
 8007adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	0e5b      	lsrs	r3, r3, #25
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	0f5b      	lsrs	r3, r3, #29
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	7b3a      	ldrb	r2, [r7, #12]
 8007b02:	4911      	ldr	r1, [pc, #68]	; (8007b48 <UARTEx_SetNbDataToProcess+0x94>)
 8007b04:	5c8a      	ldrb	r2, [r1, r2]
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b0a:	7b3a      	ldrb	r2, [r7, #12]
 8007b0c:	490f      	ldr	r1, [pc, #60]	; (8007b4c <UARTEx_SetNbDataToProcess+0x98>)
 8007b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	7b7a      	ldrb	r2, [r7, #13]
 8007b20:	4909      	ldr	r1, [pc, #36]	; (8007b48 <UARTEx_SetNbDataToProcess+0x94>)
 8007b22:	5c8a      	ldrb	r2, [r1, r2]
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b28:	7b7a      	ldrb	r2, [r7, #13]
 8007b2a:	4908      	ldr	r1, [pc, #32]	; (8007b4c <UARTEx_SetNbDataToProcess+0x98>)
 8007b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	08007be8 	.word	0x08007be8
 8007b4c:	08007bf0 	.word	0x08007bf0

08007b50 <__libc_init_array>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4d0d      	ldr	r5, [pc, #52]	; (8007b88 <__libc_init_array+0x38>)
 8007b54:	4c0d      	ldr	r4, [pc, #52]	; (8007b8c <__libc_init_array+0x3c>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	d109      	bne.n	8007b74 <__libc_init_array+0x24>
 8007b60:	4d0b      	ldr	r5, [pc, #44]	; (8007b90 <__libc_init_array+0x40>)
 8007b62:	4c0c      	ldr	r4, [pc, #48]	; (8007b94 <__libc_init_array+0x44>)
 8007b64:	f000 f820 	bl	8007ba8 <_init>
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	d105      	bne.n	8007b7e <__libc_init_array+0x2e>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b78:	4798      	blx	r3
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7ee      	b.n	8007b5c <__libc_init_array+0xc>
 8007b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b82:	4798      	blx	r3
 8007b84:	3601      	adds	r6, #1
 8007b86:	e7f2      	b.n	8007b6e <__libc_init_array+0x1e>
 8007b88:	08007c00 	.word	0x08007c00
 8007b8c:	08007c00 	.word	0x08007c00
 8007b90:	08007c00 	.word	0x08007c00
 8007b94:	08007c04 	.word	0x08007c04

08007b98 <memset>:
 8007b98:	4402      	add	r2, r0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d100      	bne.n	8007ba2 <memset+0xa>
 8007ba0:	4770      	bx	lr
 8007ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba6:	e7f9      	b.n	8007b9c <memset+0x4>

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
